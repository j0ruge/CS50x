<!DOCTYPE html>
<html lang="en-us" class="wf-ptsans-n7-active wf-ptsans-n4-active wf-active"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width"><meta property="og:description" content="Harvard University's introduction to the intellectual enterprises of computer science and the art of programming.">

        <meta property="og:image" content="https://cs50.harvard.edu/x/2023/assets/sanders.jpg"><meta property="og:title" content="Lecture 1 - CS50x 2023">

        <link href="https://cs50.harvard.edu/x/2023/favicon.ico?1703971162" rel="icon">

        <!-- https://fonts.google.com/specimen/PT+Sans?query=PT+Sans&selection.family=PT+Sans:ital,wght@0,400;0,700;1,400;1,700 -->
        <script src="Lecture%201%20-%20CS50x%202023_arquivos/webfont.js"></script>

        <!-- https://getbootstrap.com/docs/ -->
        <script src="Lecture%201%20-%20CS50x%202023_arquivos/jquery.min.js"></script>
        <script src="Lecture%201%20-%20CS50x%202023_arquivos/bootstrap.bundle.min.js"></script>

        <!-- https://bootstrap-table.com/docs/getting-started/introduction/ -->
        <link href="Lecture%201%20-%20CS50x%202023_arquivos/bootstrap-table.min.css" rel="stylesheet">
        <script src="Lecture%201%20-%20CS50x%202023_arquivos/bootstrap-table.min.js"></script>
        <script src="Lecture%201%20-%20CS50x%202023_arquivos/bootstrap-table-mobile.min.js"></script>

        <!-- https://fontawesome.com/how-to-use/on-the-web/referencing-icons/basic-use -->
        
        <link crossorigin="anonymous" href="Lecture%201%20-%20CS50x%202023_arquivos/a6e66aa089.css" rel="stylesheet">
        

        <!-- https://moment.github.io/luxon/ -->
        <script src="Lecture%201%20-%20CS50x%202023_arquivos/luxon.min.js"></script>

        <!-- http://docs.mathjax.org/ -->
        <!-- http://docs.mathjax.org/en/latest/options/output/chtml.html?highlight=displayAlign#the-configuration-block -->
        <script>
            MathJax = {
               chtml: {
                    displayAlign: "left"
                }
            };
        </script>
        <script src="Lecture%201%20-%20CS50x%202023_arquivos/tex-chtml.js"></script><style type="text/css">.CtxtMenu_InfoClose {  top:.2em; right:.2em;}
.CtxtMenu_InfoContent {  overflow:auto; text-align:left; font-size:80%;  padding:.4em .6em; border:1px inset; margin:1em 0px;  max-height:20em; max-width:30em; background-color:#EEEEEE;  white-space:normal;}
.CtxtMenu_Info.CtxtMenu_MousePost {outline:none;}
.CtxtMenu_Info {  position:fixed; left:50%; width:auto; text-align:center;  border:3px outset; padding:1em 2em; background-color:#DDDDDD;  color:black;  cursor:default; font-family:message-box; font-size:120%;  font-style:normal; text-indent:0; text-transform:none;  line-height:normal; letter-spacing:normal; word-spacing:normal;  word-wrap:normal; white-space:nowrap; float:none; z-index:201;  border-radius: 15px;                     /* Opera 10.5 and IE9 */  -webkit-border-radius:15px;               /* Safari and Chrome */  -moz-border-radius:15px;                  /* Firefox */  -khtml-border-radius:15px;                /* Konqueror */  box-shadow:0px 10px 20px #808080;         /* Opera 10.5 and IE9 */  -webkit-box-shadow:0px 10px 20px #808080; /* Safari 3 & Chrome */  -moz-box-shadow:0px 10px 20px #808080;    /* Forefox 3.5 */  -khtml-box-shadow:0px 10px 20px #808080;  /* Konqueror */  filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color="gray", Positive="true"); /* IE */}
</style><style type="text/css">.CtxtMenu_MenuClose {  position:absolute;  cursor:pointer;  display:inline-block;  border:2px solid #AAA;  border-radius:18px;  -webkit-border-radius: 18px;             /* Safari and Chrome */  -moz-border-radius: 18px;                /* Firefox */  -khtml-border-radius: 18px;              /* Konqueror */  font-family: "Courier New", Courier;  font-size:24px;  color:#F0F0F0}
.CtxtMenu_MenuClose span {  display:block; background-color:#AAA; border:1.5px solid;  border-radius:18px;  -webkit-border-radius: 18px;             /* Safari and Chrome */  -moz-border-radius: 18px;                /* Firefox */  -khtml-border-radius: 18px;              /* Konqueror */  line-height:0;  padding:8px 0 6px     /* may need to be browser-specific */}
.CtxtMenu_MenuClose:hover {  color:white!important;  border:2px solid #CCC!important}
.CtxtMenu_MenuClose:hover span {  background-color:#CCC!important}
.CtxtMenu_MenuClose:hover:focus {  outline:none}
</style><style type="text/css">.CtxtMenu_Menu {  position:absolute;  background-color:white;  color:black;  width:auto; padding:5px 0px;  border:1px solid #CCCCCC; margin:0; cursor:default;  font: menu; text-align:left; text-indent:0; text-transform:none;  line-height:normal; letter-spacing:normal; word-spacing:normal;  word-wrap:normal; white-space:nowrap; float:none; z-index:201;  border-radius: 5px;                     /* Opera 10.5 and IE9 */  -webkit-border-radius: 5px;             /* Safari and Chrome */  -moz-border-radius: 5px;                /* Firefox */  -khtml-border-radius: 5px;              /* Konqueror */  box-shadow:0px 10px 20px #808080;         /* Opera 10.5 and IE9 */  -webkit-box-shadow:0px 10px 20px #808080; /* Safari 3 & Chrome */  -moz-box-shadow:0px 10px 20px #808080;    /* Forefox 3.5 */  -khtml-box-shadow:0px 10px 20px #808080;  /* Konqueror */}
.CtxtMenu_MenuItem {  padding: 1px 2em;  background:transparent;}
.CtxtMenu_MenuArrow {  position:absolute; right:.5em; padding-top:.25em; color:#666666;  font-family: null; font-size: .75em}
.CtxtMenu_MenuActive .CtxtMenu_MenuArrow {color:white}
.CtxtMenu_MenuArrow.CtxtMenu_RTL {left:.5em; right:auto}
.CtxtMenu_MenuCheck {  position:absolute; left:.7em;  font-family: null}
.CtxtMenu_MenuCheck.CtxtMenu_RTL { right:.7em; left:auto }
.CtxtMenu_MenuRadioCheck {  position:absolute; left: .7em;}
.CtxtMenu_MenuRadioCheck.CtxtMenu_RTL {  right: .7em; left:auto}
.CtxtMenu_MenuInputBox {  padding-left: 1em; right:.5em; color:#666666;  font-family: null;}
.CtxtMenu_MenuInputBox.CtxtMenu_RTL {  left: .1em;}
.CtxtMenu_MenuComboBox {  left:.1em; padding-bottom:.5em;}
.CtxtMenu_MenuSlider {  left: .1em;}
.CtxtMenu_SliderValue {  position:absolute; right:.1em; padding-top:.25em; color:#333333;  font-size: .75em}
.CtxtMenu_SliderBar {  outline: none; background: #d3d3d3}
.CtxtMenu_MenuLabel {  padding: 1px 2em 3px 1.33em;  font-style:italic}
.CtxtMenu_MenuRule {  border-top: 1px solid #DDDDDD;  margin: 4px 3px;}
.CtxtMenu_MenuDisabled {  color:GrayText}
.CtxtMenu_MenuActive {  background-color: #606872;  color: white;}
.CtxtMenu_MenuDisabled:focus {  background-color: #E8E8E8}
.CtxtMenu_MenuLabel:focus {  background-color: #E8E8E8}
.CtxtMenu_ContextMenu:focus {  outline:none}
.CtxtMenu_ContextMenu .CtxtMenu_MenuItem:focus {  outline:none}
.CtxtMenu_SelectionMenu {  position:relative; float:left;  border-bottom: none; -webkit-box-shadow:none; -webkit-border-radius:0px; }
.CtxtMenu_SelectionItem {  padding-right: 1em;}
.CtxtMenu_Selection {  right: 40%; width:50%; }
.CtxtMenu_SelectionBox {  padding: 0em; max-height:20em; max-width: none;  background-color:#FFFFFF;}
.CtxtMenu_SelectionDivider {  clear: both; border-top: 2px solid #000000;}
.CtxtMenu_Menu .CtxtMenu_MenuClose {  top:-10px; left:-10px}
</style>

        <!-- https://github.com/verlok/vanilla-lazyload -->
        <script src="Lecture%201%20-%20CS50x%202023_arquivos/intersection-observer.js"></script>
        <script src="Lecture%201%20-%20CS50x%202023_arquivos/lazyload.min.js"></script>

        <!-- https://github.com/davidjbradshaw/iframe-resizer -->
        <script src="Lecture%201%20-%20CS50x%202023_arquivos/iframeResizer.min.js"></script>

        <!-- https://github.com/scratchblocks/scratchblocks/releases -->
        <script src="Lecture%201%20-%20CS50x%202023_arquivos/scratchblocks.min.js"></script><style><![CDATA[.sb-label{font-family:Lucida Grande,Verdana,Arial,DejaVu Sans,sans-serif;font-weight:700;fill:#fff;font-size:10px;word-spacing:1px}.sb-obsolete{fill:#d42828}.sb-motion{fill:#4a6cd4}.sb-looks{fill:#8a55d7}.sb-sound{fill:#bb42c3}.sb-pen{fill:#0e9a6c}.sb-events{fill:#c88330}.sb-control{fill:#e1a91a}.sb-sensing{fill:#2ca5e2}.sb-operators{fill:#5cb712}.sb-variables{fill:#ee7d16}.sb-list{fill:#cc5b22}.sb-custom{fill:#632d99}.sb-custom-arg{fill:#5947b1}.sb-extension{fill:#4b4a60}.sb-grey{fill:#969696}.sb-bevel{filter:url(#bevelFilter)}.sb-input{filter:url(#inputBevelFilter)}.sb-input-number,.sb-input-number-dropdown,.sb-input-string{fill:#fff}.sb-literal-dropdown,.sb-literal-number,.sb-literal-number-dropdown,.sb-literal-string{font-weight:400;font-size:9px;word-spacing:0}.sb-literal-number,.sb-literal-number-dropdown,.sb-literal-string{fill:#000}.sb-darker{filter:url(#inputDarkFilter)}.sb-outline{stroke:#fff;stroke-opacity:.2;stroke-width:2;fill:none}.sb-comment,.sb-define-hat-cap{stroke:#632d99;stroke-width:1;fill:#8e2ec2}.sb-comment{fill:#ffffa5;stroke:#d0d1d2}.sb-comment-line{fill:#ffff80}.sb-comment-label{font-family:Helvetica,Arial,DejaVu Sans,sans-serif;font-weight:700;fill:#5c5d5f;word-spacing:0;font-size:12px}.sb-diff{fill:none;stroke:#000}.sb-diff-ins{stroke-width:2px}.sb-diff-del{stroke-width:3px}]]></style><style><![CDATA[.sb3-label{font:500 12pt Helvetica Neue,Helvetica,sans-serif;word-spacing:1pt}.sb3-literal-dropdown,.sb3-literal-number,.sb3-literal-number-dropdown,.sb3-literal-string{word-spacing:0}.sb3-comment{fill:#ffffa5;stroke:#d0d1d2;stroke-width:1}.sb3-comment-line{fill:#ffff80}.sb3-comment-label{font:400 12pt Helvetica Neue,Helvetica,sans-serif;fill:#000;word-spacing:0}.sb3-diff{fill:none;stroke:#000}.sb3-diff-ins{stroke-width:2px}.sb3-diff-del{stroke-width:3px}svg .sb3-motion{fill:#4c97ff;stroke:#3373cc}svg .sb3-motion-alt{fill:#4280d7}svg .sb3-motion-dark{fill:#3373cc}svg .sb3-looks{fill:#96f;stroke:#774dcb}svg .sb3-looks-alt{fill:#855cd6}svg .sb3-looks-dark{fill:#774dcb}svg .sb3-sound{fill:#cf63cf;stroke:#bd42bd}svg .sb3-sound-alt{fill:#c94fc9}svg .sb3-sound-dark{fill:#bd42bd}svg .sb3-control{fill:#ffab19;stroke:#cf8b17}svg .sb3-control-alt{fill:#ec9c13}svg .sb3-control-dark{fill:#cf8b17}svg .sb3-events{fill:#ffbf00;stroke:#c90}svg .sb3-events-alt{fill:#e6ac00}svg .sb3-events-dark{fill:#c90}svg .sb3-sensing{fill:#5cb1d6;stroke:#2e8eb8}svg .sb3-sensing-alt{fill:#47a8d1}svg .sb3-sensing-dark{fill:#2e8eb8}svg .sb3-operators{fill:#59c059;stroke:#389438}svg .sb3-operators-alt{fill:#46b946}svg .sb3-operators-dark{fill:#389438}svg .sb3-variables{fill:#ff8c1a;stroke:#db6e00}svg .sb3-variables-alt{fill:#ff8000}svg .sb3-variables-dark{fill:#db6e00}svg .sb3-list{fill:#ff661a;stroke:#e64d00}svg .sb3-list-alt{fill:#f50}svg .sb3-list-dark{fill:#e64d00}svg .sb3-custom{fill:#ff6680;stroke:#f35}svg .sb3-custom-alt{fill:#ff4d6a}svg .sb3-custom-dark{fill:#f35}svg .sb3-extension{fill:#0fbd8c;stroke:#0b8e69}svg .sb3-extension-alt{fill:#0da57a}svg .sb3-extension-dark{fill:#0b8e69}svg .sb3-obsolete{fill:#ed4242;stroke:#ca2b2b}svg .sb3-obsolete-alt{fill:#db3333}svg .sb3-obsolete-dark{fill:#ca2b2b}svg .sb3-grey{fill:#bfbfbf;stroke:#909090}svg .sb3-grey-alt{fill:#b2b2b2}svg .sb3-grey-dark{fill:#909090}svg .sb3-label{fill:#fff}svg .sb3-input-color{stroke:#fff}svg .sb3-input-number,svg .sb3-input-string{fill:#fff}svg .sb3-literal-number,svg .sb3-literal-string{fill:#575e75}svg.scratchblocks-style-scratch3-high-contrast .sb3-motion{fill:#80b5ff;stroke:#3373cc}svg.scratchblocks-style-scratch3-high-contrast .sb3-motion-alt{fill:#b3d2ff}svg.scratchblocks-style-scratch3-high-contrast .sb3-motion-dark{fill:#3373cc}svg.scratchblocks-style-scratch3-high-contrast .sb3-looks{fill:#ccb3ff;stroke:#774dcb}svg.scratchblocks-style-scratch3-high-contrast .sb3-looks-alt{fill:#dcf}svg.scratchblocks-style-scratch3-high-contrast .sb3-looks-dark{fill:#774dcb}svg.scratchblocks-style-scratch3-high-contrast .sb3-sound{fill:#e19de1;stroke:#bd42bd}svg.scratchblocks-style-scratch3-high-contrast .sb3-sound-alt{fill:#ffb3ff}svg.scratchblocks-style-scratch3-high-contrast .sb3-sound-dark{fill:#bd42bd}svg.scratchblocks-style-scratch3-high-contrast .sb3-control{fill:#ffbe4c;stroke:#cf8b17}svg.scratchblocks-style-scratch3-high-contrast .sb3-control-alt{fill:#ffda99}svg.scratchblocks-style-scratch3-high-contrast .sb3-control-dark{fill:#cf8b17}svg.scratchblocks-style-scratch3-high-contrast .sb3-events{fill:#ffd966;stroke:#c90}svg.scratchblocks-style-scratch3-high-contrast .sb3-events-alt{fill:#ffecb3}svg.scratchblocks-style-scratch3-high-contrast .sb3-events-dark{fill:#c90}svg.scratchblocks-style-scratch3-high-contrast .sb3-sensing{fill:#85c4e0;stroke:#2e8eb8}svg.scratchblocks-style-scratch3-high-contrast .sb3-sensing-alt{fill:#aed8ea}svg.scratchblocks-style-scratch3-high-contrast .sb3-sensing-dark{fill:#2e8eb8}svg.scratchblocks-style-scratch3-high-contrast .sb3-operators{fill:#7ece7e;stroke:#389438}svg.scratchblocks-style-scratch3-high-contrast .sb3-operators-alt{fill:#b5e3b5}svg.scratchblocks-style-scratch3-high-contrast .sb3-operators-dark{fill:#389438}svg.scratchblocks-style-scratch3-high-contrast .sb3-variables{fill:#ffa54c;stroke:#db6e00}svg.scratchblocks-style-scratch3-high-contrast .sb3-variables-alt{fill:#fc9}svg.scratchblocks-style-scratch3-high-contrast .sb3-variables-dark{fill:#db6e00}svg.scratchblocks-style-scratch3-high-contrast .sb3-list{fill:#f96;stroke:#e64d00}svg.scratchblocks-style-scratch3-high-contrast .sb3-list-alt{fill:#ffcab0}svg.scratchblocks-style-scratch3-high-contrast .sb3-list-dark{fill:#e64d00}svg.scratchblocks-style-scratch3-high-contrast .sb3-custom{fill:#f9a;stroke:#e64d00}svg.scratchblocks-style-scratch3-high-contrast .sb3-custom-alt{fill:#ffccd5}svg.scratchblocks-style-scratch3-high-contrast .sb3-custom-dark{fill:#e64d00}svg.scratchblocks-style-scratch3-high-contrast .sb3-extension{fill:#13ecaf;stroke:#0b8e69}svg.scratchblocks-style-scratch3-high-contrast .sb3-extension-alt{fill:#75f0cd}svg.scratchblocks-style-scratch3-high-contrast .sb3-extension-dark{fill:#0b8e69}svg.scratchblocks-style-scratch3-high-contrast .sb3-obsolete{fill:#fc6666;stroke:#d32121}svg.scratchblocks-style-scratch3-high-contrast .sb3-obsolete-alt{fill:#fcb0b0}svg.scratchblocks-style-scratch3-high-contrast .sb3-obsolete-dark{fill:#d32121}svg.scratchblocks-style-scratch3-high-contrast .sb3-grey{fill:#bfbfbf;stroke:#959595}svg.scratchblocks-style-scratch3-high-contrast .sb3-grey-alt{fill:#b2b2b2}svg.scratchblocks-style-scratch3-high-contrast .sb3-grey-dark{fill:#959595}svg.scratchblocks-style-scratch3-high-contrast .sb3-label{fill:#000}svg.scratchblocks-style-scratch3-high-contrast .sb3-input-color{stroke:#fff}svg.scratchblocks-style-scratch3-high-contrast .sb3-input-number,svg.scratchblocks-style-scratch3-high-contrast .sb3-input-string{fill:#fff}svg.scratchblocks-style-scratch3-high-contrast .sb3-literal-number,svg.scratchblocks-style-scratch3-high-contrast .sb3-literal-string{fill:#000}]]></style>

        <!-- https://mermaid-js.github.io/ -->
        <script src="Lecture%201%20-%20CS50x%202023_arquivos/mermaid.min.js"></script>

        <!-- https://github.com/twitter/twemoji -->
        <script src="Lecture%201%20-%20CS50x%202023_arquivos/twemoji.min.js"></script>

        

        <link href="Lecture%201%20-%20CS50x%202023_arquivos/page.css" rel="stylesheet">
        <link rel="stylesheet" href="Lecture%201%20-%20CS50x%202023_arquivos/css.css" media="all"><script src="Lecture%201%20-%20CS50x%202023_arquivos/jekyll-theme-cs50.js"></script>

        <script>
            window.CS50 = {
                local: {"day":"numeric","hour":"numeric","minute":"numeric","month":"long","timeZoneName":"short","weekday":"long","year":"numeric"},
                locale: "en",
                tz: "America/New_York"
            };
        </script>

        <title>Lecture 1 - CS50x 2023</title>


    <style id="MJX-CHTML-styles">
mjx-container[jax="CHTML"] {
  line-height: 0;
}

mjx-container [space="1"] {
  margin-left: .111em;
}

mjx-container [space="2"] {
  margin-left: .167em;
}

mjx-container [space="3"] {
  margin-left: .222em;
}

mjx-container [space="4"] {
  margin-left: .278em;
}

mjx-container [space="5"] {
  margin-left: .333em;
}

mjx-container [rspace="1"] {
  margin-right: .111em;
}

mjx-container [rspace="2"] {
  margin-right: .167em;
}

mjx-container [rspace="3"] {
  margin-right: .222em;
}

mjx-container [rspace="4"] {
  margin-right: .278em;
}

mjx-container [rspace="5"] {
  margin-right: .333em;
}

mjx-container [size="s"] {
  font-size: 70.7%;
}

mjx-container [size="ss"] {
  font-size: 50%;
}

mjx-container [size="Tn"] {
  font-size: 60%;
}

mjx-container [size="sm"] {
  font-size: 85%;
}

mjx-container [size="lg"] {
  font-size: 120%;
}

mjx-container [size="Lg"] {
  font-size: 144%;
}

mjx-container [size="LG"] {
  font-size: 173%;
}

mjx-container [size="hg"] {
  font-size: 207%;
}

mjx-container [size="HG"] {
  font-size: 249%;
}

mjx-container [width="full"] {
  width: 100%;
}

mjx-box {
  display: inline-block;
}

mjx-block {
  display: block;
}

mjx-itable {
  display: inline-table;
}

mjx-row {
  display: table-row;
}

mjx-row > * {
  display: table-cell;
}

mjx-mtext {
  display: inline-block;
}

mjx-mstyle {
  display: inline-block;
}

mjx-merror {
  display: inline-block;
  color: red;
  background-color: yellow;
}

mjx-mphantom {
  visibility: hidden;
}

_::-webkit-full-page-media, _:future, :root mjx-container {
  will-change: opacity;
}

mjx-assistive-mml {
  position: absolute !important;
  top: 0px;
  left: 0px;
  clip: rect(1px, 1px, 1px, 1px);
  padding: 1px 0px 0px 0px !important;
  border: 0px !important;
  display: block !important;
  width: auto !important;
  overflow: hidden !important;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

mjx-assistive-mml[display="block"] {
  width: 100% !important;
}

mjx-c::before {
  display: block;
  width: 0;
}

.MJX-TEX {
  font-family: MJXZERO, MJXTEX;
}

.TEX-B {
  font-family: MJXZERO, MJXTEX-B;
}

.TEX-I {
  font-family: MJXZERO, MJXTEX-I;
}

.TEX-MI {
  font-family: MJXZERO, MJXTEX-MI;
}

.TEX-BI {
  font-family: MJXZERO, MJXTEX-BI;
}

.TEX-S1 {
  font-family: MJXZERO, MJXTEX-S1;
}

.TEX-S2 {
  font-family: MJXZERO, MJXTEX-S2;
}

.TEX-S3 {
  font-family: MJXZERO, MJXTEX-S3;
}

.TEX-S4 {
  font-family: MJXZERO, MJXTEX-S4;
}

.TEX-A {
  font-family: MJXZERO, MJXTEX-A;
}

.TEX-C {
  font-family: MJXZERO, MJXTEX-C;
}

.TEX-CB {
  font-family: MJXZERO, MJXTEX-CB;
}

.TEX-FR {
  font-family: MJXZERO, MJXTEX-FR;
}

.TEX-FRB {
  font-family: MJXZERO, MJXTEX-FRB;
}

.TEX-SS {
  font-family: MJXZERO, MJXTEX-SS;
}

.TEX-SSB {
  font-family: MJXZERO, MJXTEX-SSB;
}

.TEX-SSI {
  font-family: MJXZERO, MJXTEX-SSI;
}

.TEX-SC {
  font-family: MJXZERO, MJXTEX-SC;
}

.TEX-T {
  font-family: MJXZERO, MJXTEX-T;
}

.TEX-V {
  font-family: MJXZERO, MJXTEX-V;
}

.TEX-VB {
  font-family: MJXZERO, MJXTEX-VB;
}

mjx-stretchy-v mjx-c, mjx-stretchy-h mjx-c {
  font-family: MJXZERO, MJXTEX-S1, MJXTEX-S4, MJXTEX, MJXTEX-A ! important;
}

@font-face /* 0 */ {
  font-family: MJXZERO;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Zero.woff") format("woff");
}

@font-face /* 1 */ {
  font-family: MJXTEX;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff") format("woff");
}

@font-face /* 2 */ {
  font-family: MJXTEX-B;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Main-Bold.woff") format("woff");
}

@font-face /* 3 */ {
  font-family: MJXTEX-I;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff") format("woff");
}

@font-face /* 4 */ {
  font-family: MJXTEX-MI;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Main-Italic.woff") format("woff");
}

@font-face /* 5 */ {
  font-family: MJXTEX-BI;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Math-BoldItalic.woff") format("woff");
}

@font-face /* 6 */ {
  font-family: MJXTEX-S1;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff") format("woff");
}

@font-face /* 7 */ {
  font-family: MJXTEX-S2;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Size2-Regular.woff") format("woff");
}

@font-face /* 8 */ {
  font-family: MJXTEX-S3;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Size3-Regular.woff") format("woff");
}

@font-face /* 9 */ {
  font-family: MJXTEX-S4;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Size4-Regular.woff") format("woff");
}

@font-face /* 10 */ {
  font-family: MJXTEX-A;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_AMS-Regular.woff") format("woff");
}

@font-face /* 11 */ {
  font-family: MJXTEX-C;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Calligraphic-Regular.woff") format("woff");
}

@font-face /* 12 */ {
  font-family: MJXTEX-CB;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Calligraphic-Bold.woff") format("woff");
}

@font-face /* 13 */ {
  font-family: MJXTEX-FR;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Fraktur-Regular.woff") format("woff");
}

@font-face /* 14 */ {
  font-family: MJXTEX-FRB;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Fraktur-Bold.woff") format("woff");
}

@font-face /* 15 */ {
  font-family: MJXTEX-SS;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Regular.woff") format("woff");
}

@font-face /* 16 */ {
  font-family: MJXTEX-SSB;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Bold.woff") format("woff");
}

@font-face /* 17 */ {
  font-family: MJXTEX-SSI;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Italic.woff") format("woff");
}

@font-face /* 18 */ {
  font-family: MJXTEX-SC;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Script-Regular.woff") format("woff");
}

@font-face /* 19 */ {
  font-family: MJXTEX-T;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Typewriter-Regular.woff") format("woff");
}

@font-face /* 20 */ {
  font-family: MJXTEX-V;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Vector-Regular.woff") format("woff");
}

@font-face /* 21 */ {
  font-family: MJXTEX-VB;
  src: url("https://cs50.harvard.edu/x/2023/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Vector-Bold.woff") format("woff");
}
</style></head>

    <body class="" data-new-gr-c-s-check-loaded="8.909.0" data-gr-ext-installed="">

        <div class="alert fixed-top mb-0 rounded-0 alert-success" data-alert="success" data-hash="9ac4ab14a4d257e81c57b7066f003075" id="alert" role="alert">
            <button aria-label="Close" class="btn-close d-none" data-bs-dismiss="alert" type="button"></button><p>This is CS50x 2023. <img draggable="false" class="emoji" alt="🎉" src="Lecture%201%20-%20CS50x%202023_arquivos/1f389.png"> Curious how your 2023 work will count toward the 2024 course? See our <a href="https://cs50.harvard.edu/x/2023/faqs/#if-i-dont-finish-the-course-before-31-december-2023-what-will-happen" class="alert-link">FAQs</a> if you started in 2023 or earlier. Interested in <a href="https://cs50.harvard.edu/x/2023/#how-to-take-this-course" class="alert-link">a verified certificate, a professional certificate, or transfer credit and accreditation</a>?</p></div>
        

        <div class="container-fluid">

            <div class="row">

                <aside class="col-lg" style="height: 897px; top: 58px;">
 
                    <header><h1 data-id="this-is-cs50"><a href="https://cs50.harvard.edu/x/2023/">This is CS50</a></h1>

<h2 class="text-white" data-id="cs50s-introduction-to-computer-science">CS50’s Introduction to Computer Science</h2>

<p>OpenCourseWare</p>

<p><a class="pr-1 small" href="https://cs50.harvard.edu/donate">Donate<i aria-hidden="true" class="fas fa-external-link-alt ps-2"></i></a></p>

<p><a href="https://cs.harvard.edu/malan/">David J. Malan</a>
<br>
<a href="mailto:malan@harvard.edu">malan@harvard.edu</a>
<br>
<a class="mr-1" href="https://www.facebook.com/dmalan"><i aria-hidden="true" class="fa-brands fa-facebook-f" title="Facebook"></i><span class="sr-only">Facebook</span></a>
<a class="mr-1" href="https://github.com/dmalan"><i aria-hidden="true" class="fa-brands fa-github" title="GitHub"></i><span class="sr-only">GitHub</span></a>
<a class="mr-1" href="https://www.instagram.com/davidjmalan/"><i aria-hidden="true" class="fa-brands fa-instagram" title="Instagram"></i><span class="sr-only">Instagram</span></a>
<a class="mr-1" href="https://www.linkedin.com/in/malan/"><i aria-hidden="true" class="fa-brands fa-linkedin" title="LinkedIn"></i><span class="sr-only">LinkedIn</span></a>
<a class="mr-1" href="https://www.reddit.com/user/davidjmalan"><i aria-hidden="true" class="fa-brands fa-reddit-alien" title="Reddit"></i><span class="sr-only">Reddit</span></a>
<a class="mr-1" href="https://www.threads.net/@davidjmalan"><i aria-hidden="true" class="fa-brands fa-threads" title="Threads"></i><span class="sr-only">Threads</span></a>
<a class="mr-1" href="https://twitter.com/davidjmalan"><i aria-hidden="true" class="fa-brands fa-twitter" title="Twitter"></i><span class="sr-only">Twitter</span></a></p></header>

                    

                    <button aria-controls="nav" aria-expanded="false" class="btn btn-sm collapsed d-lg-none" data-bs-target="aside &gt; nav" data-bs-toggle="collapse">
                        Menu
                    </button>

                    <nav class="collapse d-lg-block" id="nav"><hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/ready/"><i class="fa-solid fa-duck me-2"></i>Ready Player 50</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/zoom/"><i class="fa-solid fa-video me-2"></i>Zoom Meetings<span class="badge ms-2 p-1 text-bg-warning">new</span></a></li>
</ul>

<!-- Tools -->
<hr class="small">

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.ai/"><i class="fa-solid fa-duck pe-2 text-decoration-none"></i>CS50.ai</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/ed"><i class="fa-solid fa-comment-question pe-2 text-decoration-none"></i>Ed Discussion</a> for Q&amp;A</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.dev/"><i class="fa-solid fa-laptop pe-2 text-decoration-none"></i>Visual Studio Code</a></li>
</ul>

<!-- Highlights -->
<hr>

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/workshop/">CS50 Educator Workshop</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/puzzles/">CS50x Puzzle Day</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/new/">What’s new for 2023?</a></li>
</ul>

<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/weeks/0/">Week 0</a> Scratch</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/weeks/1/">Week 1</a> C</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/weeks/2/">Week 2</a> Arrays</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/weeks/3/">Week 3</a> Algorithms</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/weeks/4/">Week 4</a> Memory</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/weeks/5/">Week 5</a> Data Structures</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/weeks/6/">Week 6</a> Python</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/weeks/7/">Week 7</a> SQL</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/weeks/8/">Week 8</a> HTML, CSS, JavaScript</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/weeks/9/">Week 9</a> Flask</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/weeks/10/">Week 10</a> Emoji</li>
</ul>
<ul class="fa-ul">
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/weeks/cybersecurity/">Cybersecurity</a></li>
</ul>
<hr>

<!-- Final project spec, seminars, shorts -->
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/project/">Final Project</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/gallery/">Gallery of Final Projects<span aria-hidden="true" class="ps-2 text-decoration-none"><img draggable="false" class="emoji" alt="🖼️" src="Lecture%201%20-%20CS50x%202023_arquivos/1f5bc.png"> </span></a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/seminars/">Seminars</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/shorts/">Shorts</a></li>
</ul>

<!-- Items that might usually appear in an academic syllabus -->
<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/honesty/">Academic Honesty</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/certificate/">CS50 Certificate</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/faqs/">FAQs</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.me/cs50x">Gradebook</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/staff/">Staff</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/syllabus/">Syllabus</a></li>
</ul>

<!-- Where to watch or take the class course -->
<hr>

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://apps.apple.com/us/app/cs50/id1631064453">Apple TV</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/">edX</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://play.google.com/store/apps/details?id=edu.harvard.cs50.googletv">Google TV</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://web.dce.harvard.edu/extension/csci/e/50">Harvard Extension School</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://web.dce.harvard.edu/summer/csci/s/50">Harvard Summer School</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.youtube.com/playlist?list=PLhQjrBD2T380xvFSUmToMMzERZ3qB5Ueu">YouTube</a></li>
</ul>

<!-- Manual page, style guide, other docs -->

<hr>

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://man.cs50.io/">Manual Pages</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.readthedocs.io/style/c/">Style Guide</a></li>
</ul>

<!-- Status Page -->
<hr>

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.statuspage.io/">Status Page</a></li>
</ul>

<!-- Communities -->
<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/communities/"><strong>Communities</strong></a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.bsky.social/">Bluesky</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.clubhouse.com/club/cs50">Clubhouse</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://discord.gg/cs50">Discord</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/ed">Ed</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.facebook.com/groups/cs50/">Facebook Group</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.facebook.com/cs50/">Facebook Page</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://github.com/cs50">GitHub</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://gitter.im/cs50/x">Gitter</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://instagram.com/cs50">Instagram</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.linkedin.com/groups/7437240/">LinkedIn Group</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.linkedin.com/school/CS50/">LinkedIn Page</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.medium.com/">Medium</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.quora.com/topic/CS50">Quora</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.reddit.com/r/cs50/">Reddit</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/slack">Slack</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.snapchat.com/add/cs50">Snapchat</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://soundcloud.com/cs50">SoundCloud</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.stackexchange.com/">Stack Exchange</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.tiktok.com/@cs50">TikTok</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://twitter.com/cs50">Twitter Account</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://twitter.com/i/communities/1722308663522594923">Twitter Community</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://www.youtube.com/subscription_center?add_user=cs50tv">YouTube</a></li>
</ul>

<!-- Courses -->
<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/courses/"><strong>Courses</strong></a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x">CS50x</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/ai">CS50 AI</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/business">CS50 Business</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/cybersecurity">CS50 Cybersecurity</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://cs50.harvard.edu/law">CS50 for Lawyers</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://cs50.harvard.edu/games">CS50 Games</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://cs50.harvard.edu/python">CS50 Python</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://cs50.harvard.edu/scratch">CS50 Scratch</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://cs50.harvard.edu/sql">CS50 SQL</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://cs50.harvard.edu/technology">CS50 Technology</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://cs50.harvard.edu/web">CS50 Web</a></li>
</ul>

<!-- Harvard Shop -->
<hr>

<p><a href="https://cs50.harvardshop.com/"><img src="Lecture%201%20-%20CS50x%202023_arquivos/shop.png" alt="Harvard Shop"></a></p>

<!-- Legal -->
<hr>

<p><a href="https://cs50.harvard.edu/x/2023/license/" class="small"><i class="fab fa-creative-commons me-1"></i>License</a></p></nav>

                    <footer></footer>

                </aside>

                <main class="col-lg" style="margin-bottom: 517px; margin-top: 58px;">

                    <a data-id="" id="lecture-1" style="top: -58px;"></a><h1 class="no_toc"><a data-id="" href="#lecture-1">Lecture 1</a></h1>

<ul id="markdown-toc">
  <li><a href="#welcome" id="markdown-toc-welcome">Welcome!</a></li>
  <li><a href="#hello-world" id="markdown-toc-hello-world">Hello World</a></li>
  <li><a href="#functions" id="markdown-toc-functions">Functions</a></li>
  <li><a href="#variables" id="markdown-toc-variables">Variables</a></li>
  <li><a href="#conditionals" id="markdown-toc-conditionals">Conditionals</a></li>
  <li><a href="#loops" id="markdown-toc-loops">Loops</a></li>
  <li><a href="#linux-and-the-command-line" id="markdown-toc-linux-and-the-command-line">Linux and the Command Line</a></li>
  <li><a href="#mario" id="markdown-toc-mario">Mario</a></li>
  <li><a href="#comments" id="markdown-toc-comments">Comments</a></li>
  <li><a href="#abstraction" id="markdown-toc-abstraction">Abstraction</a></li>
  <li><a href="#operators-and-types" id="markdown-toc-operators-and-types">Operators and Types</a></li>
  <li><a href="#summing-up" id="markdown-toc-summing-up">Summing Up</a></li>
</ul>

<a data-id="" id="welcome" style="top: -58px;"></a><h2><a data-id="" href="#welcome">Welcome!</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>In our previous session, we learned about Scratch, a visual programming language.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Indeed,
 all the essential programming concepts presented in Scratch will be 
utilized as you learn how to program any programming language.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Recall that machines only understand binary. Where humans write <em>source code</em>, a list of instructions for the computer that is human readable, machines only understand what we can now call <em>machine code</em>. This machine code is a pattern of ones and zeros that produces a desired effect.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>It turns out that we can convert <em>source code</em> into <code class="language-plaintext highlighter-rouge">machine code</code> using a very special piece of software called a <em>compiler</em>. Today, we will be introducing you to a compiler that will allow you to convert source code in the programming language <em>C</em> into machine code.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Today, in addition to learning about how to code, you will be learning about how to write good code.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Code can be evaluated upon three axes. First, <em>correctness</em> refers to “does the code run as intended?” Second, <em>design</em> refers to “how well is the code designed?” Finally, <em>style</em> refers to “how aesthetically pleasing and consistent is the code?”</li>
</ul>

<a data-id="" id="hello-world" style="top: -58px;"></a><h2><a data-id="" href="#hello-world">Hello World</a></h2>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>The compiler that is utilized for this course is <em>Visual Studio Code</em>, affectionately referred to as <cs50.dev>, which can be accessed via that same url, or simply as *VS Code.*</cs50.dev></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>One
 of the most important reasons we utilize VS Code is that it has all the
 software required for the course already pre-loaded on it. This course 
and the instructions herein were designed with VS Code in mind. Best 
always to utilize VS Code for assignments in this course.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>You can open VS Code at <a href="https://cs50.dev/">cs50.dev</a>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>The compiler can be divided into a number of regions:</p>

    <p><img src="Lecture%201%20-%20CS50x%202023_arquivos/cs50Week1Slide017.png" alt="IDE" title="IDE">
  Notice that there is a <em>file explorer</em> on the left side where you can find your files. Further, notice that there is a region in the middle called a <em>text editor</em> where you can edit your program. Finally, there is a <code class="language-plaintext highlighter-rouge">command line interface</code>, known as a <em>CLI</em>, <em>command line</em>, or <em>terminal window</em> where we can send commands to the computer in the cloud.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>We can build your first program in C by typing <code class="language-plaintext highlighter-rouge">code hello.c</code> into the terminal window. Notice that we deliberately lowercased the entire filename and included the <code class="language-plaintext highlighter-rouge">.c</code> extension. Then, in the text editor that appears, write code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, world</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Note that every single character above serves a purpose. If you type it incorrectly, the program will not run.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Clicking back in the terminal window, you can compile your code by executing <code class="language-plaintext highlighter-rouge">make hello</code>. Notice that we are omitting <code class="language-plaintext highlighter-rouge">.c</code>. <code class="language-plaintext highlighter-rouge">make</code> is a compiler that will look for our <code class="language-plaintext highlighter-rouge">hello.c</code> file and turn it into a program called <code class="language-plaintext highlighter-rouge">hello</code>.
 If executing this command results in no errors, you can proceed. If 
not, double-check your code to ensure it matches the above.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Now, type <code class="language-plaintext highlighter-rouge">./hello</code> and your program will execute saying <code class="language-plaintext highlighter-rouge">hello, world</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Now, open the <em>file explorer</em> on the left. You will notice that there is now both a file called <code class="language-plaintext highlighter-rouge">hello.c</code> and another file called <code class="language-plaintext highlighter-rouge">hello</code>. <code class="language-plaintext highlighter-rouge">hello.c</code> is able to be read by the compiler: It’s where your code is stored. <code class="language-plaintext highlighter-rouge">hello</code> is an executable file that you can run, but cannot be read by the compiler.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Let’s look at our code more carefully:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, world</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that our code is highlighted using syntax highlighting.</p>
  </li>
</ul>

<a data-id="" id="functions" style="top: -58px;"></a><h2><a data-id="" href="#functions">Functions</a></h2>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>In Scratch, we utilized the <code class="language-plaintext highlighter-rouge">say</code> block to display any text on the screen. Indeed, in C, we have a function called <code class="language-plaintext highlighter-rouge">printf</code> that does exactly this.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Notice our code already invokes this function:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">printf</span><span class="p">(</span><span class="s">"hello, world</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
</code></pre></div>    </div>
    <p>Notice that the printf function is called. The argument passed to
 printf is ‘hello, world\n’. The statement of code is closed with a <code class="language-plaintext highlighter-rouge">;</code>.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>A common error in C programming is the omission of a semicolon. Modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, world</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice the semicolon is now gone.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>In your terminal window, run <code class="language-plaintext highlighter-rouge">make hello</code>. You will now be met with numerous errors! Placing the semicolon back in the correct position and running <code class="language-plaintext highlighter-rouge">make hello</code> again, the errors go away.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Notice also the special symbol <code class="language-plaintext highlighter-rouge">\n</code> in your code. Try removing those characters and <em>making</em> your program again by executing <code class="language-plaintext highlighter-rouge">make hello</code>. Typing <code class="language-plaintext highlighter-rouge">./hello</code> in the terminal window, how did your program change?</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Restore your program to the following:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, world</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice the semicolon and <code class="language-plaintext highlighter-rouge">\n</code> have been restored.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>The statement at the start of the code <code class="language-plaintext highlighter-rouge">#include &lt;stdio.h&gt;</code> is a very special command that tells the compile that you want to use the capabilities of <em>library</em> called <code class="language-plaintext highlighter-rouge">stdio.h</code>. This allows you, among many other things, to utilize the <code class="language-plaintext highlighter-rouge">printf</code> function. You can read about all the capabilities of this library on the <a href="https://manual.cs50.io/">Manual Pages</a>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>It turns out that CS50 has its own library called <code class="language-plaintext highlighter-rouge">cs50.h</code>. Let’s use this library in your program.</li>
</ul>

<a data-id="" id="variables" style="top: -58px;"></a><h2><a data-id="" href="#variables">Variables</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Recall that in Scratch, we had the ability to ask the user “What’s your name?” and say “hello” with that name appended to it.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>In C, we can do the same. Modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"What's your name? "</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"hello, %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">answer</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that <code class="language-plaintext highlighter-rouge">#include &lt;cs50.h&gt;</code> has been added to the top of your code. The <code class="language-plaintext highlighter-rouge">get_string</code> function is used to get a string from the user. Then, the variable <code class="language-plaintext highlighter-rouge">answer</code> is passed to the <code class="language-plaintext highlighter-rouge">printf</code> function. <code class="language-plaintext highlighter-rouge">%s</code> tells the <code class="language-plaintext highlighter-rouge">printf</code> function to prepare itself to receive a <code class="language-plaintext highlighter-rouge">string</code>.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">answer</code> is a special holding place we call a <em>variable</em>. <code class="language-plaintext highlighter-rouge">answer</code> is of type <code class="language-plaintext highlighter-rouge">string</code> and can hold any string within it. There are many <em>data types</em>, such as <code class="language-plaintext highlighter-rouge">int</code>, <code class="language-plaintext highlighter-rouge">bool</code>, <code class="language-plaintext highlighter-rouge">char</code>, and many others.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Running <code class="language-plaintext highlighter-rouge">make hello</code> again in the terminal window, you can run your program by typing <code class="language-plaintext highlighter-rouge">./hello</code>. The program now asks for your name and then says hello with your name attached.</li>
</ul>

<a data-id="" id="conditionals" style="top: -58px;"></a><h2><a data-id="" href="#conditionals">Conditionals</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Another building block you utilized within Scratch was that of <em>conditionals</em>.
 For example, you might want to do one thing if x is greater than y. 
Further, you might want to do something else if that condition is not 
met.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>In the terminal window, type <code class="language-plaintext highlighter-rouge">code compare.c</code> and write code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"What's x? "</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"What's y? "</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"x is less than y</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that we create two variables, an <code class="language-plaintext highlighter-rouge">int</code> or integer called <code class="language-plaintext highlighter-rouge">x</code> and another called <code class="language-plaintext highlighter-rouge">y</code>. The values of these are populated using the <code class="language-plaintext highlighter-rouge">get_int</code> function.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>You can run your code by executing <code class="language-plaintext highlighter-rouge">make compare</code> in the terminal window, followed by <code class="language-plaintext highlighter-rouge">./compare</code>. If you get any error messages, check your code for errors.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>We can improve your program by coding as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"What's x? "</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"What's y? "</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"x is less than y</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"x is greater than y</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"x is equal to y</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that all potential outcomes are now accounted for.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>You can re-make and re-run your program and test it out.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Considering another data type called a <code class="language-plaintext highlighter-rouge">char</code> we can start a new program by typing <code class="language-plaintext highlighter-rouge">code agree.c</code> into the terminal window. In the text editor, write code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Prompt user to agree</span>
    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">get_char</span><span class="p">(</span><span class="s">"Do you agree? "</span><span class="p">);</span>

    <span class="c1">// Check whether agreed</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">'Y'</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">'y'</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Agreed.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">'N'</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">'n'</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Not agreed.</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that single quotes are utilized for single characters. Further, notice that <code class="language-plaintext highlighter-rouge">==</code> ensure that something <em>is equal</em> to something else, where a single equal sign would have a very different function in C. Finally, notice that <code class="language-plaintext highlighter-rouge">||</code> effectively means <em>or</em>.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>You can test your code by typing <code class="language-plaintext highlighter-rouge">make agree</code> into the terminal window, followed by <code class="language-plaintext highlighter-rouge">./agree</code>.</li>
</ul>

<a data-id="" id="loops" style="top: -58px;"></a><h2><a data-id="" href="#loops">Loops</a></h2>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>We can also utilize the loops building block from Scratch in our C programs.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>In your terminal window, type <code class="language-plaintext highlighter-rouge">code meow.c</code> and write code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"meow</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"meow</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"meow</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice this does as intended but has an opportunity for better design.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>We can improve our program by modifying your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"meow</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that we create an <code class="language-plaintext highlighter-rouge">int</code> called <code class="language-plaintext highlighter-rouge">i</code> and assign it the value <code class="language-plaintext highlighter-rouge">0</code>. Then, we create a <code class="language-plaintext highlighter-rouge">while</code> loop that will run as long as <code class="language-plaintext highlighter-rouge">i &lt; 3</code>. Then, the loop runs. Every time <code class="language-plaintext highlighter-rouge">1</code> is added to <code class="language-plaintext highlighter-rouge">i</code> using the <code class="language-plaintext highlighter-rouge">i++</code> statement.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Similarly, we can implement a count-down of sorts by modifying our code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"meow</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
        <span class="n">i</span><span class="o">--</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice how our counter <code class="language-plaintext highlighter-rouge">i</code> is started at <code class="language-plaintext highlighter-rouge">3</code>. Each time the loop runs, it will reduce the counter by <code class="language-plaintext highlighter-rouge">1</code>. Once the counter is less than zero, it will stop the loop.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>We can further improve the design using a <code class="language-plaintext highlighter-rouge">for</code> loop. Modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"meow</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that the <code class="language-plaintext highlighter-rouge">for</code> loop includes three arguments. The first argument <code class="language-plaintext highlighter-rouge">int i = 0</code> starts our counter at zero. The second argument <code class="language-plaintext highlighter-rouge">i &lt; 3</code> is the condition that is being checked. Finally, the argument <code class="language-plaintext highlighter-rouge">i++</code> tells the loop to increment by one each time the loop runs.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>We can even loop forever using the following code:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"meow</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that <code class="language-plaintext highlighter-rouge">true</code>
 will always be the case. Therefore, the code will always run. You will 
lose control of your terminal window by running this code. You can break
 from an infinite by hitting <code class="language-plaintext highlighter-rouge">control-C</code> on your keyboard.</p>
  </li>
</ul>

<a data-id="" id="linux-and-the-command-line" style="top: -58px;"></a><h2><a data-id="" href="#linux-and-the-command-line">Linux and the Command Line</a></h2>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><em>Linux</em> is an operating system that is accessible via the command line in the terminal window in VS Code.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Some common command-line arguments we may use include:
    <ul class="fa-ul">
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">cd</code>, for changing our current directory (folder)</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">cp</code>, for copying files and directories</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">ls</code>, for listing files in a directory</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">mkdir</code>, for making a directory</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">mv</code>, for moving (renaming) files and directories</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">rm</code>, for removing (deleting) files</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">rmdir</code>, for removing (deleting) directories</li>
    </ul>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>The most commonly used is <code class="language-plaintext highlighter-rouge">ls</code> which will list all the files in the current directory or directory. Go ahead and type <code class="language-plaintext highlighter-rouge">ls</code> into the terminal window and hit <code class="language-plaintext highlighter-rouge">enter</code>. You’ll see all the files in the current folder.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Another useful command is <code class="language-plaintext highlighter-rouge">mv</code>, where you can move a file from one file to another. For example, you could use this command to rename <code class="language-plaintext highlighter-rouge">Hello.c</code> (notice the uppercase <code class="language-plaintext highlighter-rouge">H</code>) to <code class="language-plaintext highlighter-rouge">hello.c</code> by typing <code class="language-plaintext highlighter-rouge">mv Hello.c hello.c</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>You can also create folders. You can type <code class="language-plaintext highlighter-rouge">mkdir pset1</code> to create a directory called <code class="language-plaintext highlighter-rouge">pset1</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>You can then use <code class="language-plaintext highlighter-rouge">cd pset1</code> to change your current directory to <code class="language-plaintext highlighter-rouge">pset1</code>.</li>
</ul>

<a data-id="" id="mario" style="top: -58px;"></a><h2><a data-id="" href="#mario">Mario</a></h2>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Everything we’ve discussed today has focused on various building-blocks of your work as a programmer.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>The
 following will help you orient toward working on a problem set for this
 class in general: How does one approach a computer science related 
problem?</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Imagine we wanted to emulate the visual of the game Super Mario 
Bros. Considering the four question-blocks pictured, how could we create
 code that roughly represents these four horizontal blocks?</p>

    <p><img src="Lecture%201%20-%20CS50x%202023_arquivos/cs50Week1Slide123.png" alt="Mario Question Marks" title="Mario Question Marks"></p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>In the terminal window, type <code class="language-plaintext highlighter-rouge">code mario.c</code> and code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"?"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice how four question marks are printed here using a loop.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Similarly, we can apply this same logic to be able to create three vertical blocks.</p>

    <p><img src="Lecture%201%20-%20CS50x%202023_arquivos/cs50Week1Slide125.png" alt="Mario Blocks" title="Mario Blocks"></p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>To accomplish this, modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"#</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice how three vertical bricks are printed using a loop.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>What if we wanted to combine these ideas to create a three-by-three group of blocks?</p>

    <p><img src="Lecture%201%20-%20CS50x%202023_arquivos/cs50Week1Slide127.png" alt="Mario Grid" title="Mario Grid"></p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>We can follow the logic above, combining the same ideas. Modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"#"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that one loop is inside another. The first loop defines 
what vertical row is being printed. For each row, three columns are 
printed. After each row, a new line is printed.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>What if we wanted to ensure that the number of blocks to be <em>constant</em>, that is, unchangeable? Modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"#"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice how <code class="language-plaintext highlighter-rouge">n</code> is now a constant. It can never be changed.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>As illustrated earlier in this lecture, we can make our code 
prompt the user for the size of the grid. Modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"Size: "</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"#"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that <code class="language-plaintext highlighter-rouge">get_int</code> is used to prompt the user.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>A general piece of advice within programming is that you should 
never fully trust your user. They will likely misbehave, typing 
incorrect values where they should not. We can protect our program from 
bad behavior by checking to make sure the user’s input satisfies our 
needs. Modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">do</span>
    <span class="p">{</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"Size: "</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"#"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice how the user is continuously prompted for the size until the user’s input is 1 or greater.</p>
  </li>
</ul>

<a data-id="" id="comments" style="top: -58px;"></a><h2><a data-id="" href="#comments">Comments</a></h2>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Comments
 are fundamental parts of a computer program, where you leave 
explanatory remarks to yourself and others that may be collaborating 
with you regarding your code.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>All code you create for this course must include robust comments.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Typically
 each comment is a few words or more, providing the reader an 
opportunity to understand what is happening in a specific block of code.
 Further, such comments serve as a reminder for you later when you need 
to revise your code.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Comments involve placing <code class="language-plaintext highlighter-rouge">//</code> into your code, followed by a comment. Modify your code as follows to integrate comments:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get size of grid</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">do</span>
    <span class="p">{</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"Size: "</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">);</span>

    <span class="c1">// Print grid of bricks</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"#"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice how each comment begins with a <code class="language-plaintext highlighter-rouge">//</code>.</p>
  </li>
</ul>

<a data-id="" id="abstraction" style="top: -58px;"></a><h2><a data-id="" href="#abstraction">Abstraction</a></h2>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><em>Abstraction</em> is the art of simplifying our code such that it deals with smaller and smaller problems.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Looking at your code, you can see how two essential problems in our code are <em>get size of grid</em> and <em>print grid of bricks</em>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>We can abstract away these two problems into separate functions. Modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">get_size</span><span class="p">(</span><span class="kt">void</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">print_grid</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">get_size</span><span class="p">();</span>
    <span class="n">print_grid</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">get_size</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
    <span class="k">do</span>
    <span class="p">{</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"Size: "</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">n</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">print_grid</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">"#"</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that we have three functions now. First, we have the <code class="language-plaintext highlighter-rouge">main</code> function that calls two other functions called <code class="language-plaintext highlighter-rouge">get_size</code> and <code class="language-plaintext highlighter-rouge">print_grid</code>. Second, we have a second function called <code class="language-plaintext highlighter-rouge">get_size</code> which includes the exact code we had to accomplish this task prior. Third, we have another function called <code class="language-plaintext highlighter-rouge">print_grid</code> that prints the grid. Because we abstracted away the essential problems within our program, our <code class="language-plaintext highlighter-rouge">main</code> function is very short.</p>
  </li>
</ul>

<a data-id="" id="operators-and-types" style="top: -58px;"></a><h2><a data-id="" href="#operators-and-types">Operators and Types</a></h2>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p><em>Operators</em> refer to the mathematical operations that are supported by your compiler. In C, these mathematical operators include:</p>

    <ul class="fa-ul">
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">+</code> for addition</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">-</code> for subtraction</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">*</code> for multiplication</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">/</code> for division</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">%</code> for remainder</li>
    </ul>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Types refer to the possible data that can be stored within a variable. For example, a <code class="language-plaintext highlighter-rouge">char</code> is designed to accommodate a single character like <code class="language-plaintext highlighter-rouge">a</code> or <code class="language-plaintext highlighter-rouge">2</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Types
 are very important because each type has specific limits. For example, 
because of the limits in memory, the highest value of an <code class="language-plaintext highlighter-rouge">int</code> can be <code class="language-plaintext highlighter-rouge">4294967296</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Types with which you might interact during this course include:</p>

    <ul class="fa-ul">
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">bool</code>, a Boolean expression of either true or false</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">char</code>, a single character like a or 2</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">double</code>, a floating-point value with more digits than a float</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">float</code>, a floating-point value, or real number with a decimal value</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">int</code>, integers up to a certain size, or number of bits</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">long</code>, integers with more bits, so they can count higher than an int</li>
      <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">string</code>, a string of characters</li>
    </ul>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>You can implement a calculator in C. In your terminal, type <code class="language-plaintext highlighter-rouge">code calculator.c</code> and write code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Prompt user for x</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"x: "</span><span class="p">);</span>

    <span class="c1">// Prompt user for y</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"y: "</span><span class="p">);</span>

    <span class="c1">// Perform addition</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice how the <code class="language-plaintext highlighter-rouge">get_int</code> function is utilized to obtain an integer from the user twice. One integer is stored in the <code class="language-plaintext highlighter-rouge">int</code> variable called <code class="language-plaintext highlighter-rouge">x</code>. Another is stored in the <code class="language-plaintext highlighter-rouge">int</code> variable called <code class="language-plaintext highlighter-rouge">y</code>. Then, the <code class="language-plaintext highlighter-rouge">printf</code> function prints the value of <code class="language-plaintext highlighter-rouge">x + y</code>, designated by the <code class="language-plaintext highlighter-rouge">%i</code> symbol.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>As you are coding, pay special attention to the types of variables you are using to avoid problems within your code.</li>
</ul>

<a data-id="" id="summing-up" style="top: -58px;"></a><h2><a data-id="" href="#summing-up">Summing Up</a></h2>
<p>In this lesson, you learned how to apply the building blocks you learned in Scratch to the C programming language. You learned…</p>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>How to create your first program in C.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Predefined functions that come natively with C and how to implement your own functions.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>How to use variables, conditionals, and loops.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>How to use the Linux command line.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>How to approach problem-solving for a computer science problem.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>How to integrate comments into your code.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>How to approach abstraction to simplify and improve your code.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>How to utilize types and operators.</li>
</ul>

<p>See you next time!</p>


                </main>

            </div>

        </div>

        
 
        <script src="Lecture%201%20-%20CS50x%202023_arquivos/page.js"></script>

    


</body><grammarly-desktop-integration data-grammarly-shadow-root="true"></grammarly-desktop-integration></html>