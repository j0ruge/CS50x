<!DOCTYPE html>
<html lang="en-us" class="wf-ptsans-n4-active wf-ptsans-n7-active wf-active"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">

        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, width=device-width"><meta property="og:description" content="Harvard University's introduction to the intellectual enterprises of computer science and the art of programming.">

        <meta property="og:image" content="https://cs50.harvard.edu/x/2024/assets/sanders.jpg"><meta property="og:title" content="Lecture 4 - CS50x 2024">

        <link href="https://cs50.harvard.edu/x/2024/favicon.ico?1709061075" rel="icon">

        <!-- https://fonts.google.com/specimen/PT+Sans?query=PT+Sans&selection.family=PT+Sans:ital,wght@0,400;0,700;1,400;1,700 -->
        <script src="Lecture%204%20-%20CS50x%202024_arquivos/webfont.js"></script>

        <!-- https://getbootstrap.com/docs/ -->
        <script src="Lecture%204%20-%20CS50x%202024_arquivos/jquery.min.js"></script>
        <script src="Lecture%204%20-%20CS50x%202024_arquivos/bootstrap.bundle.min.js"></script>

        <!-- https://bootstrap-table.com/docs/getting-started/introduction/ -->
        <link href="Lecture%204%20-%20CS50x%202024_arquivos/bootstrap-table.min.css" rel="stylesheet">
        <script src="Lecture%204%20-%20CS50x%202024_arquivos/bootstrap-table.min.js"></script>
        <script src="Lecture%204%20-%20CS50x%202024_arquivos/bootstrap-table-mobile.min.js"></script>

        <!-- https://fontawesome.com/how-to-use/on-the-web/referencing-icons/basic-use -->
        
        <link crossorigin="anonymous" href="Lecture%204%20-%20CS50x%202024_arquivos/a6e66aa089.css" rel="stylesheet">
        

        <!-- https://moment.github.io/luxon/ -->
        <script src="Lecture%204%20-%20CS50x%202024_arquivos/luxon.min.js"></script>

        <!-- http://docs.mathjax.org/ -->
        <!-- http://docs.mathjax.org/en/latest/options/output/chtml.html?highlight=displayAlign#the-configuration-block -->
        <script>
            MathJax = {
               chtml: {
                    displayAlign: "left"
                }
            };
        </script>
        <script src="Lecture%204%20-%20CS50x%202024_arquivos/tex-chtml.js"></script><style type="text/css">.CtxtMenu_InfoClose {  top:.2em; right:.2em;}
.CtxtMenu_InfoContent {  overflow:auto; text-align:left; font-size:80%;  padding:.4em .6em; border:1px inset; margin:1em 0px;  max-height:20em; max-width:30em; background-color:#EEEEEE;  white-space:normal;}
.CtxtMenu_Info.CtxtMenu_MousePost {outline:none;}
.CtxtMenu_Info {  position:fixed; left:50%; width:auto; text-align:center;  border:3px outset; padding:1em 2em; background-color:#DDDDDD;  color:black;  cursor:default; font-family:message-box; font-size:120%;  font-style:normal; text-indent:0; text-transform:none;  line-height:normal; letter-spacing:normal; word-spacing:normal;  word-wrap:normal; white-space:nowrap; float:none; z-index:201;  border-radius: 15px;                     /* Opera 10.5 and IE9 */  -webkit-border-radius:15px;               /* Safari and Chrome */  -moz-border-radius:15px;                  /* Firefox */  -khtml-border-radius:15px;                /* Konqueror */  box-shadow:0px 10px 20px #808080;         /* Opera 10.5 and IE9 */  -webkit-box-shadow:0px 10px 20px #808080; /* Safari 3 & Chrome */  -moz-box-shadow:0px 10px 20px #808080;    /* Forefox 3.5 */  -khtml-box-shadow:0px 10px 20px #808080;  /* Konqueror */  filter:progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color="gray", Positive="true"); /* IE */}
</style><style type="text/css">.CtxtMenu_MenuClose {  position:absolute;  cursor:pointer;  display:inline-block;  border:2px solid #AAA;  border-radius:18px;  -webkit-border-radius: 18px;             /* Safari and Chrome */  -moz-border-radius: 18px;                /* Firefox */  -khtml-border-radius: 18px;              /* Konqueror */  font-family: "Courier New", Courier;  font-size:24px;  color:#F0F0F0}
.CtxtMenu_MenuClose span {  display:block; background-color:#AAA; border:1.5px solid;  border-radius:18px;  -webkit-border-radius: 18px;             /* Safari and Chrome */  -moz-border-radius: 18px;                /* Firefox */  -khtml-border-radius: 18px;              /* Konqueror */  line-height:0;  padding:8px 0 6px     /* may need to be browser-specific */}
.CtxtMenu_MenuClose:hover {  color:white!important;  border:2px solid #CCC!important}
.CtxtMenu_MenuClose:hover span {  background-color:#CCC!important}
.CtxtMenu_MenuClose:hover:focus {  outline:none}
</style><style type="text/css">.CtxtMenu_Menu {  position:absolute;  background-color:white;  color:black;  width:auto; padding:5px 0px;  border:1px solid #CCCCCC; margin:0; cursor:default;  font: menu; text-align:left; text-indent:0; text-transform:none;  line-height:normal; letter-spacing:normal; word-spacing:normal;  word-wrap:normal; white-space:nowrap; float:none; z-index:201;  border-radius: 5px;                     /* Opera 10.5 and IE9 */  -webkit-border-radius: 5px;             /* Safari and Chrome */  -moz-border-radius: 5px;                /* Firefox */  -khtml-border-radius: 5px;              /* Konqueror */  box-shadow:0px 10px 20px #808080;         /* Opera 10.5 and IE9 */  -webkit-box-shadow:0px 10px 20px #808080; /* Safari 3 & Chrome */  -moz-box-shadow:0px 10px 20px #808080;    /* Forefox 3.5 */  -khtml-box-shadow:0px 10px 20px #808080;  /* Konqueror */}
.CtxtMenu_MenuItem {  padding: 1px 2em;  background:transparent;}
.CtxtMenu_MenuArrow {  position:absolute; right:.5em; padding-top:.25em; color:#666666;  font-family: null; font-size: .75em}
.CtxtMenu_MenuActive .CtxtMenu_MenuArrow {color:white}
.CtxtMenu_MenuArrow.CtxtMenu_RTL {left:.5em; right:auto}
.CtxtMenu_MenuCheck {  position:absolute; left:.7em;  font-family: null}
.CtxtMenu_MenuCheck.CtxtMenu_RTL { right:.7em; left:auto }
.CtxtMenu_MenuRadioCheck {  position:absolute; left: .7em;}
.CtxtMenu_MenuRadioCheck.CtxtMenu_RTL {  right: .7em; left:auto}
.CtxtMenu_MenuInputBox {  padding-left: 1em; right:.5em; color:#666666;  font-family: null;}
.CtxtMenu_MenuInputBox.CtxtMenu_RTL {  left: .1em;}
.CtxtMenu_MenuComboBox {  left:.1em; padding-bottom:.5em;}
.CtxtMenu_MenuSlider {  left: .1em;}
.CtxtMenu_SliderValue {  position:absolute; right:.1em; padding-top:.25em; color:#333333;  font-size: .75em}
.CtxtMenu_SliderBar {  outline: none; background: #d3d3d3}
.CtxtMenu_MenuLabel {  padding: 1px 2em 3px 1.33em;  font-style:italic}
.CtxtMenu_MenuRule {  border-top: 1px solid #DDDDDD;  margin: 4px 3px;}
.CtxtMenu_MenuDisabled {  color:GrayText}
.CtxtMenu_MenuActive {  background-color: #606872;  color: white;}
.CtxtMenu_MenuDisabled:focus {  background-color: #E8E8E8}
.CtxtMenu_MenuLabel:focus {  background-color: #E8E8E8}
.CtxtMenu_ContextMenu:focus {  outline:none}
.CtxtMenu_ContextMenu .CtxtMenu_MenuItem:focus {  outline:none}
.CtxtMenu_SelectionMenu {  position:relative; float:left;  border-bottom: none; -webkit-box-shadow:none; -webkit-border-radius:0px; }
.CtxtMenu_SelectionItem {  padding-right: 1em;}
.CtxtMenu_Selection {  right: 40%; width:50%; }
.CtxtMenu_SelectionBox {  padding: 0em; max-height:20em; max-width: none;  background-color:#FFFFFF;}
.CtxtMenu_SelectionDivider {  clear: both; border-top: 2px solid #000000;}
.CtxtMenu_Menu .CtxtMenu_MenuClose {  top:-10px; left:-10px}
</style>

        <!-- https://github.com/verlok/vanilla-lazyload -->
        <script src="Lecture%204%20-%20CS50x%202024_arquivos/intersection-observer.js"></script>
        <script src="Lecture%204%20-%20CS50x%202024_arquivos/lazyload.min.js"></script>

        <!-- https://github.com/davidjbradshaw/iframe-resizer -->
        <script src="Lecture%204%20-%20CS50x%202024_arquivos/iframeResizer.min.js"></script>

        <!-- https://github.com/scratchblocks/scratchblocks/releases -->
        <script src="Lecture%204%20-%20CS50x%202024_arquivos/scratchblocks.min.js"></script><style><![CDATA[.sb-label{font-family:Lucida Grande,Verdana,Arial,DejaVu Sans,sans-serif;font-weight:700;fill:#fff;font-size:10px;word-spacing:1px}.sb-obsolete{fill:#d42828}.sb-motion{fill:#4a6cd4}.sb-looks{fill:#8a55d7}.sb-sound{fill:#bb42c3}.sb-pen{fill:#0e9a6c}.sb-events{fill:#c88330}.sb-control{fill:#e1a91a}.sb-sensing{fill:#2ca5e2}.sb-operators{fill:#5cb712}.sb-variables{fill:#ee7d16}.sb-list{fill:#cc5b22}.sb-custom{fill:#632d99}.sb-custom-arg{fill:#5947b1}.sb-extension{fill:#4b4a60}.sb-grey{fill:#969696}.sb-bevel{filter:url(#bevelFilter)}.sb-input{filter:url(#inputBevelFilter)}.sb-input-number,.sb-input-number-dropdown,.sb-input-string{fill:#fff}.sb-literal-dropdown,.sb-literal-number,.sb-literal-number-dropdown,.sb-literal-string{font-weight:400;font-size:9px;word-spacing:0}.sb-literal-number,.sb-literal-number-dropdown,.sb-literal-string{fill:#000}.sb-darker{filter:url(#inputDarkFilter)}.sb-outline{stroke:#fff;stroke-opacity:.2;stroke-width:2;fill:none}.sb-comment,.sb-define-hat-cap{stroke:#632d99;stroke-width:1;fill:#8e2ec2}.sb-comment{fill:#ffffa5;stroke:#d0d1d2}.sb-comment-line{fill:#ffff80}.sb-comment-label{font-family:Helvetica,Arial,DejaVu Sans,sans-serif;font-weight:700;fill:#5c5d5f;word-spacing:0;font-size:12px}.sb-diff{fill:none;stroke:#000}.sb-diff-ins{stroke-width:2px}.sb-diff-del{stroke-width:3px}]]></style><style><![CDATA[.sb3-label{font:500 12pt Helvetica Neue,Helvetica,sans-serif;word-spacing:1pt}.sb3-literal-dropdown,.sb3-literal-number,.sb3-literal-number-dropdown,.sb3-literal-string{word-spacing:0}.sb3-diff{fill:none;stroke:#000}.sb3-diff-ins{stroke-width:2px}.sb3-diff-del{stroke-width:3px}svg .sb3-motion{fill:#4c97ff;stroke:#3373cc}svg .sb3-motion-alt{fill:#4280d7}svg .sb3-motion-dark{fill:#3373cc}svg .sb3-looks{fill:#96f;stroke:#774dcb}svg .sb3-looks-alt{fill:#855cd6}svg .sb3-looks-dark{fill:#774dcb}svg .sb3-sound{fill:#cf63cf;stroke:#bd42bd}svg .sb3-sound-alt{fill:#c94fc9}svg .sb3-sound-dark{fill:#bd42bd}svg .sb3-control{fill:#ffab19;stroke:#cf8b17}svg .sb3-control-alt{fill:#ec9c13}svg .sb3-control-dark{fill:#cf8b17}svg .sb3-events{fill:#ffbf00;stroke:#c90}svg .sb3-events-alt{fill:#e6ac00}svg .sb3-events-dark{fill:#c90}svg .sb3-sensing{fill:#5cb1d6;stroke:#2e8eb8}svg .sb3-sensing-alt{fill:#47a8d1}svg .sb3-sensing-dark{fill:#2e8eb8}svg .sb3-operators{fill:#59c059;stroke:#389438}svg .sb3-operators-alt{fill:#46b946}svg .sb3-operators-dark{fill:#389438}svg .sb3-variables{fill:#ff8c1a;stroke:#db6e00}svg .sb3-variables-alt{fill:#ff8000}svg .sb3-variables-dark{fill:#db6e00}svg .sb3-list{fill:#ff661a;stroke:#e64d00}svg .sb3-list-alt{fill:#f50}svg .sb3-list-dark{fill:#e64d00}svg .sb3-custom{fill:#ff6680;stroke:#f35}svg .sb3-custom-alt{fill:#ff4d6a}svg .sb3-custom-dark{fill:#f35}svg .sb3-extension{fill:#0fbd8c;stroke:#0b8e69}svg .sb3-extension-alt{fill:#0da57a}svg .sb3-extension-dark{fill:#0b8e69}svg .sb3-obsolete{fill:#ed4242;stroke:#ca2b2b}svg .sb3-obsolete-alt{fill:#db3333}svg .sb3-obsolete-dark{fill:#ca2b2b}svg .sb3-grey{fill:#bfbfbf;stroke:#909090}svg .sb3-grey-alt{fill:#b2b2b2}svg .sb3-grey-dark{fill:#909090}svg .sb3-label{fill:#fff}svg .sb3-input-color{stroke:#fff}svg .sb3-input-number,svg .sb3-input-string{fill:#fff}svg .sb3-literal-number,svg .sb3-literal-string{fill:#575e75}svg .sb3-custom-arg{fill:#ff6680;stroke:#f35}svg.scratchblocks-style-scratch3-high-contrast .sb3-motion{fill:#80b5ff;stroke:#3373cc}svg.scratchblocks-style-scratch3-high-contrast .sb3-motion-alt{fill:#b3d2ff}svg.scratchblocks-style-scratch3-high-contrast .sb3-motion-dark{fill:#3373cc}svg.scratchblocks-style-scratch3-high-contrast .sb3-looks{fill:#ccb3ff;stroke:#774dcb}svg.scratchblocks-style-scratch3-high-contrast .sb3-looks-alt{fill:#dcf}svg.scratchblocks-style-scratch3-high-contrast .sb3-looks-dark{fill:#774dcb}svg.scratchblocks-style-scratch3-high-contrast .sb3-sound{fill:#e19de1;stroke:#bd42bd}svg.scratchblocks-style-scratch3-high-contrast .sb3-sound-alt{fill:#ffb3ff}svg.scratchblocks-style-scratch3-high-contrast .sb3-sound-dark{fill:#bd42bd}svg.scratchblocks-style-scratch3-high-contrast .sb3-control{fill:#ffbe4c;stroke:#cf8b17}svg.scratchblocks-style-scratch3-high-contrast .sb3-control-alt{fill:#ffda99}svg.scratchblocks-style-scratch3-high-contrast .sb3-control-dark{fill:#cf8b17}svg.scratchblocks-style-scratch3-high-contrast .sb3-events{fill:#ffd966;stroke:#c90}svg.scratchblocks-style-scratch3-high-contrast .sb3-events-alt{fill:#ffecb3}svg.scratchblocks-style-scratch3-high-contrast .sb3-events-dark{fill:#c90}svg.scratchblocks-style-scratch3-high-contrast .sb3-sensing{fill:#85c4e0;stroke:#2e8eb8}svg.scratchblocks-style-scratch3-high-contrast .sb3-sensing-alt{fill:#aed8ea}svg.scratchblocks-style-scratch3-high-contrast .sb3-sensing-dark{fill:#2e8eb8}svg.scratchblocks-style-scratch3-high-contrast .sb3-operators{fill:#7ece7e;stroke:#389438}svg.scratchblocks-style-scratch3-high-contrast .sb3-operators-alt{fill:#b5e3b5}svg.scratchblocks-style-scratch3-high-contrast .sb3-operators-dark{fill:#389438}svg.scratchblocks-style-scratch3-high-contrast .sb3-variables{fill:#ffa54c;stroke:#db6e00}svg.scratchblocks-style-scratch3-high-contrast .sb3-variables-alt{fill:#fc9}svg.scratchblocks-style-scratch3-high-contrast .sb3-variables-dark{fill:#db6e00}svg.scratchblocks-style-scratch3-high-contrast .sb3-list{fill:#f96;stroke:#e64d00}svg.scratchblocks-style-scratch3-high-contrast .sb3-list-alt{fill:#ffcab0}svg.scratchblocks-style-scratch3-high-contrast .sb3-list-dark{fill:#e64d00}svg.scratchblocks-style-scratch3-high-contrast .sb3-custom{fill:#f9a;stroke:#e64d00}svg.scratchblocks-style-scratch3-high-contrast .sb3-custom-alt{fill:#ffccd5}svg.scratchblocks-style-scratch3-high-contrast .sb3-custom-dark{fill:#e64d00}svg.scratchblocks-style-scratch3-high-contrast .sb3-extension{fill:#13ecaf;stroke:#0b8e69}svg.scratchblocks-style-scratch3-high-contrast .sb3-extension-alt{fill:#75f0cd}svg.scratchblocks-style-scratch3-high-contrast .sb3-extension-dark{fill:#0b8e69}svg.scratchblocks-style-scratch3-high-contrast .sb3-obsolete{fill:#fc6666;stroke:#d32121}svg.scratchblocks-style-scratch3-high-contrast .sb3-obsolete-alt{fill:#fcb0b0}svg.scratchblocks-style-scratch3-high-contrast .sb3-obsolete-dark{fill:#d32121}svg.scratchblocks-style-scratch3-high-contrast .sb3-grey{fill:#bfbfbf;stroke:#959595}svg.scratchblocks-style-scratch3-high-contrast .sb3-grey-alt{fill:#b2b2b2}svg.scratchblocks-style-scratch3-high-contrast .sb3-grey-dark{fill:#959595}svg.scratchblocks-style-scratch3-high-contrast .sb3-label{fill:#000}svg.scratchblocks-style-scratch3-high-contrast .sb3-input-color{stroke:#fff}svg.scratchblocks-style-scratch3-high-contrast .sb3-input-number,svg.scratchblocks-style-scratch3-high-contrast .sb3-input-string{fill:#fff}svg.scratchblocks-style-scratch3-high-contrast .sb3-literal-number,svg.scratchblocks-style-scratch3-high-contrast .sb3-literal-string{fill:#000}svg.scratchblocks-style-scratch3-high-contrast .sb3-custom-arg{fill:#f9a;stroke:#e64d00}.sb3-comment{fill:#ffffa5;stroke:#d0d1d2;stroke-width:1}.sb3-comment-line{fill:#ffff80}.sb3-comment-label,.sb3-label.sb3-comment-label{font:400 12pt Helvetica Neue,Helvetica,sans-serif;fill:#000;word-spacing:0}]]></style>

        <!-- https://mermaid-js.github.io/ -->
        <script src="Lecture%204%20-%20CS50x%202024_arquivos/mermaid.min.js"></script>

        <!-- https://github.com/twitter/twemoji -->
        <script src="Lecture%204%20-%20CS50x%202024_arquivos/twemoji.min.js"></script>

        

        <link href="Lecture%204%20-%20CS50x%202024_arquivos/page.css" rel="stylesheet">
        <link rel="stylesheet" href="Lecture%204%20-%20CS50x%202024_arquivos/css.css" media="all"><script src="Lecture%204%20-%20CS50x%202024_arquivos/jekyll-theme-cs50.js"></script>

        <script>
            window.CS50 = {
                local: {"day":"numeric","hour":"numeric","minute":"numeric","month":"long","timeZoneName":"short","weekday":"long","year":"numeric"},
                locale: "en",
                tz: "America/New_York"
            };
        </script>

        <title>Lecture 4 - CS50x 2024</title>


    <style id="MJX-CHTML-styles">
mjx-container[jax="CHTML"] {
  line-height: 0;
}

mjx-container [space="1"] {
  margin-left: .111em;
}

mjx-container [space="2"] {
  margin-left: .167em;
}

mjx-container [space="3"] {
  margin-left: .222em;
}

mjx-container [space="4"] {
  margin-left: .278em;
}

mjx-container [space="5"] {
  margin-left: .333em;
}

mjx-container [rspace="1"] {
  margin-right: .111em;
}

mjx-container [rspace="2"] {
  margin-right: .167em;
}

mjx-container [rspace="3"] {
  margin-right: .222em;
}

mjx-container [rspace="4"] {
  margin-right: .278em;
}

mjx-container [rspace="5"] {
  margin-right: .333em;
}

mjx-container [size="s"] {
  font-size: 70.7%;
}

mjx-container [size="ss"] {
  font-size: 50%;
}

mjx-container [size="Tn"] {
  font-size: 60%;
}

mjx-container [size="sm"] {
  font-size: 85%;
}

mjx-container [size="lg"] {
  font-size: 120%;
}

mjx-container [size="Lg"] {
  font-size: 144%;
}

mjx-container [size="LG"] {
  font-size: 173%;
}

mjx-container [size="hg"] {
  font-size: 207%;
}

mjx-container [size="HG"] {
  font-size: 249%;
}

mjx-container [width="full"] {
  width: 100%;
}

mjx-box {
  display: inline-block;
}

mjx-block {
  display: block;
}

mjx-itable {
  display: inline-table;
}

mjx-row {
  display: table-row;
}

mjx-row > * {
  display: table-cell;
}

mjx-mtext {
  display: inline-block;
}

mjx-mstyle {
  display: inline-block;
}

mjx-merror {
  display: inline-block;
  color: red;
  background-color: yellow;
}

mjx-mphantom {
  visibility: hidden;
}

_::-webkit-full-page-media, _:future, :root mjx-container {
  will-change: opacity;
}

mjx-assistive-mml {
  position: absolute !important;
  top: 0px;
  left: 0px;
  clip: rect(1px, 1px, 1px, 1px);
  padding: 1px 0px 0px 0px !important;
  border: 0px !important;
  display: block !important;
  width: auto !important;
  overflow: hidden !important;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

mjx-assistive-mml[display="block"] {
  width: 100% !important;
}

mjx-c::before {
  display: block;
  width: 0;
}

.MJX-TEX {
  font-family: MJXZERO, MJXTEX;
}

.TEX-B {
  font-family: MJXZERO, MJXTEX-B;
}

.TEX-I {
  font-family: MJXZERO, MJXTEX-I;
}

.TEX-MI {
  font-family: MJXZERO, MJXTEX-MI;
}

.TEX-BI {
  font-family: MJXZERO, MJXTEX-BI;
}

.TEX-S1 {
  font-family: MJXZERO, MJXTEX-S1;
}

.TEX-S2 {
  font-family: MJXZERO, MJXTEX-S2;
}

.TEX-S3 {
  font-family: MJXZERO, MJXTEX-S3;
}

.TEX-S4 {
  font-family: MJXZERO, MJXTEX-S4;
}

.TEX-A {
  font-family: MJXZERO, MJXTEX-A;
}

.TEX-C {
  font-family: MJXZERO, MJXTEX-C;
}

.TEX-CB {
  font-family: MJXZERO, MJXTEX-CB;
}

.TEX-FR {
  font-family: MJXZERO, MJXTEX-FR;
}

.TEX-FRB {
  font-family: MJXZERO, MJXTEX-FRB;
}

.TEX-SS {
  font-family: MJXZERO, MJXTEX-SS;
}

.TEX-SSB {
  font-family: MJXZERO, MJXTEX-SSB;
}

.TEX-SSI {
  font-family: MJXZERO, MJXTEX-SSI;
}

.TEX-SC {
  font-family: MJXZERO, MJXTEX-SC;
}

.TEX-T {
  font-family: MJXZERO, MJXTEX-T;
}

.TEX-V {
  font-family: MJXZERO, MJXTEX-V;
}

.TEX-VB {
  font-family: MJXZERO, MJXTEX-VB;
}

mjx-stretchy-v mjx-c, mjx-stretchy-h mjx-c {
  font-family: MJXZERO, MJXTEX-S1, MJXTEX-S4, MJXTEX, MJXTEX-A ! important;
}

@font-face /* 0 */ {
  font-family: MJXZERO;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Zero.woff") format("woff");
}

@font-face /* 1 */ {
  font-family: MJXTEX;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Main-Regular.woff") format("woff");
}

@font-face /* 2 */ {
  font-family: MJXTEX-B;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Main-Bold.woff") format("woff");
}

@font-face /* 3 */ {
  font-family: MJXTEX-I;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Math-Italic.woff") format("woff");
}

@font-face /* 4 */ {
  font-family: MJXTEX-MI;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Main-Italic.woff") format("woff");
}

@font-face /* 5 */ {
  font-family: MJXTEX-BI;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Math-BoldItalic.woff") format("woff");
}

@font-face /* 6 */ {
  font-family: MJXTEX-S1;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Size1-Regular.woff") format("woff");
}

@font-face /* 7 */ {
  font-family: MJXTEX-S2;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Size2-Regular.woff") format("woff");
}

@font-face /* 8 */ {
  font-family: MJXTEX-S3;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Size3-Regular.woff") format("woff");
}

@font-face /* 9 */ {
  font-family: MJXTEX-S4;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Size4-Regular.woff") format("woff");
}

@font-face /* 10 */ {
  font-family: MJXTEX-A;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_AMS-Regular.woff") format("woff");
}

@font-face /* 11 */ {
  font-family: MJXTEX-C;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Calligraphic-Regular.woff") format("woff");
}

@font-face /* 12 */ {
  font-family: MJXTEX-CB;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Calligraphic-Bold.woff") format("woff");
}

@font-face /* 13 */ {
  font-family: MJXTEX-FR;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Fraktur-Regular.woff") format("woff");
}

@font-face /* 14 */ {
  font-family: MJXTEX-FRB;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Fraktur-Bold.woff") format("woff");
}

@font-face /* 15 */ {
  font-family: MJXTEX-SS;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Regular.woff") format("woff");
}

@font-face /* 16 */ {
  font-family: MJXTEX-SSB;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Bold.woff") format("woff");
}

@font-face /* 17 */ {
  font-family: MJXTEX-SSI;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_SansSerif-Italic.woff") format("woff");
}

@font-face /* 18 */ {
  font-family: MJXTEX-SC;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Script-Regular.woff") format("woff");
}

@font-face /* 19 */ {
  font-family: MJXTEX-T;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Typewriter-Regular.woff") format("woff");
}

@font-face /* 20 */ {
  font-family: MJXTEX-V;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Vector-Regular.woff") format("woff");
}

@font-face /* 21 */ {
  font-family: MJXTEX-VB;
  src: url("https://cs50.harvard.edu/x/2024/assets/mathjax/es5/output/chtml/fonts/woff-v2/MathJax_Vector-Bold.woff") format("woff");
}
</style></head>

    <body class="" data-new-gr-c-s-check-loaded="8.911.0" data-gr-ext-installed="">

        <div class="alert fixed-top mb-0 rounded-0 alert-success alert-dismissible" data-alert="success dismissible" data-hash="0582284520da3ceb2db951148fb0413b" id="alert" role="alert">
            <button aria-label="Close" class="btn-close" data-bs-dismiss="alert" type="button"></button><p>This is CS50x 2024. <img draggable="false" class="emoji" alt="🎉" src="Lecture%204%20-%20CS50x%202024_arquivos/1f389.png"> Curious how your 2023 work counts toward the 2024 course? See our <a href="https://cs50.harvard.edu/x/2024/faqs/#if-i-started-cs50x-before-2024-can-i-resume" class="alert-link">FAQs</a> if you started in 2023 or earlier. Interested in <a href="https://cs50.harvard.edu/x/2024/#how-to-take-this-course" class="alert-link">a verified certificate, a professional certificate, or transfer credit and accreditation</a>?</p></div>
        

        <div class="container-fluid">

            <div class="row">

                <aside class="col-lg" style="height: 967.767px; top: 58.2333px;">
 
                    <header><h1 data-id="this-is-cs50"><a href="https://cs50.harvard.edu/x/2024/">This is CS50</a></h1>

<h2 class="text-white" data-id="cs50s-introduction-to-computer-science">CS50’s Introduction to Computer Science</h2>

<p>OpenCourseWare</p>

<p><a class="pr-1 small" href="https://cs50.harvard.edu/donate">Donate<i aria-hidden="true" class="fas fa-external-link-alt ps-2"></i></a></p>

<p><a href="https://cs.harvard.edu/malan/">David J. Malan</a>
<br>
<a href="mailto:malan@harvard.edu">malan@harvard.edu</a>
<br>
<a class="mr-1" href="https://www.facebook.com/dmalan"><i aria-hidden="true" class="fa-brands fa-facebook-f" title="Facebook"></i><span class="sr-only">Facebook</span></a>
<a class="mr-1" href="https://github.com/dmalan"><i aria-hidden="true" class="fa-brands fa-github" title="GitHub"></i><span class="sr-only">GitHub</span></a>
<a class="mr-1" href="https://www.instagram.com/davidjmalan/"><i aria-hidden="true" class="fa-brands fa-instagram" title="Instagram"></i><span class="sr-only">Instagram</span></a>
<a class="mr-1" href="https://www.linkedin.com/in/malan/"><i aria-hidden="true" class="fa-brands fa-linkedin" title="LinkedIn"></i><span class="sr-only">LinkedIn</span></a>
<a class="mr-1" href="https://www.reddit.com/user/davidjmalan"><i aria-hidden="true" class="fa-brands fa-reddit-alien" title="Reddit"></i><span class="sr-only">Reddit</span></a>
<a class="mr-1" href="https://www.threads.net/@davidjmalan"><i aria-hidden="true" class="fa-brands fa-threads" title="Threads"></i><span class="sr-only">Threads</span></a>
<a class="mr-1" href="https://twitter.com/davidjmalan"><i aria-hidden="true" class="fa-brands fa-twitter" title="Twitter"></i><span class="sr-only">Twitter</span></a></p></header>

                    

                    <button aria-controls="nav" aria-expanded="false" class="btn btn-sm collapsed d-lg-none" data-bs-target="aside &gt; nav" data-bs-toggle="collapse">
                        Menu
                    </button>

                    <nav class="collapse d-lg-block" id="nav"><hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2023/ready/"><i class="fa-solid fa-duck me-2"></i>Ready Player 50</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/zoom/"><i class="fa-solid fa-video me-2"></i>Zoom Meetings<span class="badge ms-2 p-1 text-bg-warning">new</span></a></li>
</ul>

<!-- Tools -->
<hr class="small">

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.ai/"><i class="fa-solid fa-duck pe-2 text-decoration-none"></i>CS50.ai</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/ed"><i class="fa-solid fa-comment-question pe-2 text-decoration-none"></i>Ed Discussion</a> for Q&amp;A</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.dev/"><i class="fa-solid fa-laptop pe-2 text-decoration-none"></i>Visual Studio Code</a></li>
</ul>

<!-- Highlights -->
<hr>

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/workshop/">CS50 Educator Workshop</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/puzzles/">CS50x Puzzle Day 2024</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/gallery/">Gallery of Final Projects<span aria-hidden="true" class="ps-2 text-decoration-none"><img draggable="false" class="emoji" alt="🖼️" src="Lecture%204%20-%20CS50x%202024_arquivos/1f5bc.png"> </span></a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/new/">What’s new for 2024?</a></li>
</ul>

<!-- Course Nav -->
<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/weeks/0/">Week 0</a> Scratch</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/weeks/1/">Week 1</a> C</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/weeks/2/">Week 2</a> Arrays</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/weeks/3/">Week 3</a> Algorithms</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/weeks/4/">Week 4</a> Memory</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/weeks/5/">Week 5</a> Data Structures</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/weeks/6/">Week 6</a> Python</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/weeks/ai/">Week 6.5</a> Artificial Intelligence</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/weeks/7/">Week 7</a> SQL</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/weeks/8/">Week 8</a> HTML, CSS, JavaScript</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/weeks/9/">Week 9</a> Flask</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/weeks/10/">Week 10</a> Cybersecurity</li>
</ul>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/practice/"><i class="fa-solid fa-rocket pe-2 text-decoration-none"></i>Additional Practice</a></li>
</ul>

<hr>

<!-- Final project spec, seminars, shorts -->
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/project/">Final Project</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/gallery/">Gallery of Final Projects<span aria-hidden="true" class="ps-2 text-decoration-none"><img draggable="false" class="emoji" alt="🖼️" src="Lecture%204%20-%20CS50x%202024_arquivos/1f5bc.png"> </span></a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/seminars/">Seminars</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span></li>
</ul>

<!-- Items that might usually appear in an academic syllabus -->
<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/honesty/">Academic Honesty</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/certificate/">CS50 Certificate</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/faqs/">FAQs</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.me/cs50x">Gradebook</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/staff/">Staff</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/syllabus/">Syllabus</a></li>
</ul>

<!-- Where to watch or take the class course -->
<hr>

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://apps.apple.com/us/app/cs50/id1631064453">Apple TV</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/">edX</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://play.google.com/store/apps/details?id=edu.harvard.cs50.googletv">Google TV</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://web.dce.harvard.edu/extension/csci/e/50">Harvard Extension School</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://web.dce.harvard.edu/summer/csci/s/50">Harvard Summer School</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.youtube.com/playlist?list=PLhQjrBD2T381WAHyx1pq-sBfykqMBI7V4">YouTube</a></li>
</ul>

<!-- Manual page, style guide, other docs -->

<hr>

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://man.cs50.io/">Manual Pages</a></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.readthedocs.io/style/c/">Style Guide</a></li>
</ul>

<!-- Status Page -->
<hr>

<ul class="small fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.statuspage.io/">Status Page</a></li>
</ul>

<!-- Communities -->
<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/communities/"><strong>Communities</strong></a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.bsky.social/">Bluesky</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.clubhouse.com/club/cs50">Clubhouse</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://discord.gg/cs50">Discord</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/ed">Ed</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.facebook.com/groups/cs50/">Facebook Group</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.facebook.com/cs50/">Facebook Page</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://github.com/cs50">GitHub</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://gitter.im/cs50/x">Gitter</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://instagram.com/cs50">Instagram</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.linkedin.com/groups/7437240/">LinkedIn Group</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.linkedin.com/school/CS50/">LinkedIn Page</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.medium.com/">Medium</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.quora.com/topic/CS50">Quora</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.reddit.com/r/cs50/">Reddit</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.edx.org/slack">Slack</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.snapchat.com/add/cs50">Snapchat</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://soundcloud.com/cs50">SoundCloud</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.stackexchange.com/">Stack Exchange</a> <span class="badge bg-light ms-1 py-1 rounded-pill text-dark">Q&amp;A</span></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://www.tiktok.com/@cs50">TikTok</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://twitter.com/cs50">Twitter Account</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://twitter.com/i/communities/1722308663522594923">Twitter Community</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://www.youtube.com/subscription_center?add_user=cs50tv">YouTube</a></li>
</ul>

<!-- Courses -->
<hr>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x/2024/courses/"><strong>Courses</strong></a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/x">CS50x</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/ai">CS50 AI</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/business">CS50 Business</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="https://cs50.harvard.edu/cybersecurity">CS50 Cybersecurity</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://cs50.harvard.edu/law">CS50 for Lawyers</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://cs50.harvard.edu/games">CS50 Games</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://cs50.harvard.edu/python">CS50 Python</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://cs50.harvard.edu/scratch">CS50 Scratch</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://cs50.harvard.edu/sql">CS50 SQL</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://cs50.harvard.edu/technology">CS50 Technology</a></li>
  <li data-marker="*" class="small"><span class="fa-li"><i class="fas fa-square"></i></span><a href="http://cs50.harvard.edu/web">CS50 Web</a></li>
</ul>

<!-- Harvard Shop -->
<hr>

<p><a href="https://cs50.harvardshop.com/"><img src="Lecture%204%20-%20CS50x%202024_arquivos/shop.png" alt="Harvard Shop"></a></p>

<!-- Legal -->
<hr>

<p><a href="https://cs50.harvard.edu/x/2024/license/" class="small"><i class="fab fa-creative-commons me-1"></i>License</a></p>

<p class="small">2024-02-27 14:11:28</p></nav>

                    <footer></footer>

                </aside>

                <main class="col-lg" style="margin-bottom: 420px; margin-top: 58.2333px;">

                    <a data-id="" id="lecture-4" style="top: -58.2333px;"></a><h1 class="no_toc"><a data-id="" href="#lecture-4">Lecture 4</a></h1>

<ul id="markdown-toc">
  <li><a href="#welcome" id="markdown-toc-welcome">Welcome!</a></li>
  <li><a href="#pixel-art" id="markdown-toc-pixel-art">Pixel Art</a></li>
  <li><a href="#hexadecimal" id="markdown-toc-hexadecimal">Hexadecimal</a></li>
  <li><a href="#memory" id="markdown-toc-memory">Memory</a></li>
  <li><a href="#pointers" id="markdown-toc-pointers">Pointers</a></li>
  <li><a href="#strings" id="markdown-toc-strings">Strings</a></li>
  <li><a href="#pointer-arithmetic" id="markdown-toc-pointer-arithmetic">Pointer Arithmetic</a></li>
  <li><a href="#string-comparison" id="markdown-toc-string-comparison">String Comparison</a></li>
  <li><a href="#copying" id="markdown-toc-copying">Copying</a></li>
  <li><a href="#malloc-and-valgrind" id="markdown-toc-malloc-and-valgrind">malloc and Valgrind</a></li>
  <li><a href="#garbage-values" id="markdown-toc-garbage-values">Garbage Values</a></li>
  <li><a href="#pointer-fun-with-binky" id="markdown-toc-pointer-fun-with-binky">Pointer Fun with Binky</a></li>
  <li><a href="#swap" id="markdown-toc-swap">Swap</a></li>
  <li><a href="#overflow" id="markdown-toc-overflow">Overflow</a></li>
  <li><a href="#scanf" id="markdown-toc-scanf"><code class="language-plaintext highlighter-rouge">scanf</code></a></li>
  <li><a href="#file-io" id="markdown-toc-file-io">File I/O</a></li>
  <li><a href="#summing-up" id="markdown-toc-summing-up">Summing Up</a></li>
</ul>

<a data-id="" id="welcome" style="top: -58.2333px;"></a><h2><a data-id="" href="#welcome">Welcome!</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>In previous weeks, we talked about images being made of smaller building blocks called pixels.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Today,
 we will go into further detail about the zeros and ones that make up 
these images. In particular, we will be going deeper into the 
fundamental building blocks that make up files, including images.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Further, we will discuss how to access the underlying data stored in computer memory.</li>
</ul>

<a data-id="" id="pixel-art" style="top: -58.2333px;"></a><h2><a data-id="" href="#pixel-art">Pixel Art</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Pixels are squares, individual dots, of color that are arranged on an up-down, left-right grid.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>You can imagine as an image as a map of bits, where zeros represent black and ones represent white.</p>

    <p><img src="Lecture%204%20-%20CS50x%202024_arquivos/cs50Week4Slide015.png" alt="Zeros and ones being converted to a black and white smiley" title="smiley"></p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p><em>RGB</em>, or <em>red, green, blue</em>, are numbers that represent the amount of each of these colors. In Adobe Photoshop, you can see these settings as follows:</p>

    <p><img src="Lecture%204%20-%20CS50x%202024_arquivos/cs50Week4Slide016.png" alt="A photoshop panel with RGB values and hexidecimal input" title="hex in photoshop"></p>

    <p>Notice how the amount of red, blue, and green changes the color selected.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>You
 can see by the image above that color is not just represented in three 
values. At the bottom of the window, there is a special value made up of
 numbers and characters. <code class="language-plaintext highlighter-rouge">255</code> is represented as <code class="language-plaintext highlighter-rouge">FF</code>. Why might this be?</li>
</ul>

<a data-id="" id="hexadecimal" style="top: -58.2333px;"></a><h2><a data-id="" href="#hexadecimal">Hexadecimal</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p><em>Hexadecimal</em> is a system of counting that has 16 counting values. They are as follows:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  0 1 2 3 4 5 6 7 8 9 a b c d e f
</code></pre></div>    </div>
    <p>Notice that <code class="language-plaintext highlighter-rouge">F</code> represents <code class="language-plaintext highlighter-rouge">15</code>.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Hexadecimal is also known as <em>base-16</em>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>When counting in hexadecimal, each column is a power of 16.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>The number <code class="language-plaintext highlighter-rouge">0</code> is represented as <code class="language-plaintext highlighter-rouge">00</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>The number <code class="language-plaintext highlighter-rouge">1</code> is represented as <code class="language-plaintext highlighter-rouge">01</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>The number <code class="language-plaintext highlighter-rouge">9</code> is represented by <code class="language-plaintext highlighter-rouge">09</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>The number <code class="language-plaintext highlighter-rouge">10</code> is represented as <code class="language-plaintext highlighter-rouge">0A</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>The number <code class="language-plaintext highlighter-rouge">15</code> is represented as <code class="language-plaintext highlighter-rouge">0F</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>The number <code class="language-plaintext highlighter-rouge">16</code> is represented as <code class="language-plaintext highlighter-rouge">10</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>The number <code class="language-plaintext highlighter-rouge">255</code> is represented as <code class="language-plaintext highlighter-rouge">FF</code>, because 16 x 15 (or <code class="language-plaintext highlighter-rouge">F</code>) is 240. Add 15 more to make 255. This is the highest number you can count using a two-digit hexadecimal system.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Hexadecimal
 is useful because it can be represented using fewer digits. Hexadecimal
 allows us to represent information more succinctly.</li>
</ul>

<a data-id="" id="memory" style="top: -58.2333px;"></a><h2><a data-id="" href="#memory">Memory</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>In weeks past, you may recall our artist rendering of concurrent 
blocks of memory. Applying hexadecimal numbering to each of these blocks
 of memory, you can visualize these as follows:</p>

    <p><img src="Lecture%204%20-%20CS50x%202024_arquivos/cs50Week4Slide065.png" alt="Blocks of memory numbered in hex" title="memory hex"></p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>You can imagine how there may be confusion regarding whether the <code class="language-plaintext highlighter-rouge">10</code> block above may represent a location in memory or the value <code class="language-plaintext highlighter-rouge">10</code>. Accordingly, by convention, all hexadecimal numbers are often represented with the <code class="language-plaintext highlighter-rouge">0x</code> prefix as follows:</p>

    <p><img src="Lecture%204%20-%20CS50x%202024_arquivos/cs50Week4Slide066.png" alt="blocks of memory numbered in hex with 0x" title="0x"></p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>In your terminal window, type <code class="language-plaintext highlighter-rouge">code addresses.c</code> and write your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice how <code class="language-plaintext highlighter-rouge">n</code> is stored in memory with the value <code class="language-plaintext highlighter-rouge">50</code>.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>You can visualize how this program stores this value as follows:</p>

    <p><img src="Lecture%204%20-%20CS50x%202024_arquivos/cs50Week4Slide070.png" alt="the value 50 stored in a memory location with hex" title="hex"></p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>The <code class="language-plaintext highlighter-rouge">C</code> language has two powerful operators that relate to memory:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  &amp; Provides the address of something stored in memory.
  * Instructs the compiler to go to a location in memory.
</code></pre></div>    </div>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>We can leverage this knowledge by modifying our code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice the <code class="language-plaintext highlighter-rouge">%p</code>, which allows us to view the address of a location in memory. <code class="language-plaintext highlighter-rouge">&amp;n</code> can be literally translated as “the address of <code class="language-plaintext highlighter-rouge">n</code>.” Executing this code will return an address of memory beginning with <code class="language-plaintext highlighter-rouge">0x</code>.</p>
  </li>
</ul>

<a data-id="" id="pointers" style="top: -58.2333px;"></a><h2><a data-id="" href="#pointers">Pointers</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>A <em>pointer</em> is a variable that contains the address of some value. Most succinctly, a pointer is an address in your computer’s memory.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Consider the following code:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>

<span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">;</span>
</code></pre></div>    </div>
    <p>Notice that <code class="language-plaintext highlighter-rouge">p</code> is a pointer that contains the address of an integer <code class="language-plaintext highlighter-rouge">n</code>.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that this code has the same effect as our previous code. We have simply leveraged our new knowledge of the <code class="language-plaintext highlighter-rouge">&amp;</code> and <code class="language-plaintext highlighter-rouge">*</code> operators.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>To illustrate the use of the <code class="language-plaintext highlighter-rouge">*</code> operator, consider the following:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that the <code class="language-plaintext highlighter-rouge">printf</code> line prints the integer at the location of <code class="language-plaintext highlighter-rouge">p</code>. <code class="language-plaintext highlighter-rouge">int *p</code> creates a pointer whose job is to store the memory address of an integer.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>You can visualize our code as follows:</p>

    <p><img src="Lecture%204%20-%20CS50x%202024_arquivos/cs50Week4Slide078.png" alt="Same value of 50 in a memory location with a pointer value stored elsewhere" title="pointer"></p>

    <p>Notice the pointer seems rather large. Indeed, a pointer is usually stored as an 8-byte value. <code class="language-plaintext highlighter-rouge">p</code> is storing the address of the <code class="language-plaintext highlighter-rouge">50</code>.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>You can more accurately visualize a pointer as one address that points to another:</p>

    <p><img src="Lecture%204%20-%20CS50x%202024_arquivos/cs50Week4Slide079.png" alt="A pointer as an arrow, pointing from one location of memory to another" title="pointer"></p>
  </li>
</ul>

<a data-id="" id="strings" style="top: -58.2333px;"></a><h2><a data-id="" href="#strings">Strings</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Now
 that we have a mental model for pointers, we can peel back a level of 
simplification that was offered earlier in this course.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Recall that a string is simply an array of characters. For example, <code class="language-plaintext highlighter-rouge">string s = "HI!"</code> can be represented as follows:</p>

    <p><img src="Lecture%204%20-%20CS50x%202024_arquivos/cs50Week4Slide085.png" alt="The string HI with an exclaimation point stored in memory" title="hi"></p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>However, what is <code class="language-plaintext highlighter-rouge">s</code> really? Where is the <code class="language-plaintext highlighter-rouge">s</code> stored in memory? As you can imagine, <code class="language-plaintext highlighter-rouge">s</code> needs to be stored somewhere. You can visualize the relationship of <code class="language-plaintext highlighter-rouge">s</code> to the string as follows:</p>

    <p><img src="Lecture%204%20-%20CS50x%202024_arquivos/cs50Week4Slide086.png" alt="Same string HI with a pointer pointing to it" title="hi pointer"></p>

    <p>Notice how a pointer called <code class="language-plaintext highlighter-rouge">s</code> tells the compiler where the first byte of the string exists in memory.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"HI!"</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice the above prints the memory locations of each character in the string <code class="language-plaintext highlighter-rouge">s</code>. The <code class="language-plaintext highlighter-rouge">&amp;</code> symbol is used to show the address of each element of the string. When running this code, notice that elements <code class="language-plaintext highlighter-rouge">0</code>, <code class="language-plaintext highlighter-rouge">1</code>, <code class="language-plaintext highlighter-rouge">2</code>, and <code class="language-plaintext highlighter-rouge">3</code> are next to one another in memory.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Likewise, you can modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="s">"HI!"</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that this code will present the string that starts at the location of <code class="language-plaintext highlighter-rouge">s</code>. This code effectively removes the training wheels of the <code class="language-plaintext highlighter-rouge">string</code> data type offered by <code class="language-plaintext highlighter-rouge">cs50.h</code>. This is raw C code, without the scaffolding of the cs50 library.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>You can imagine how a string, as a data type, is created.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Last week, we learned how to create your own data type as a struct.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>The cs50 library includes a struct as follows: <code class="language-plaintext highlighter-rouge">typedef char *string</code></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>This struct, when using the cs50 library, allows one to use a custom data type called <code class="language-plaintext highlighter-rouge">string</code>.</li>
</ul>

<a data-id="" id="pointer-arithmetic" style="top: -58.2333px;"></a><h2><a data-id="" href="#pointer-arithmetic">Pointer Arithmetic</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>You can modify your code to accomplish the same thing in a longer form as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="s">"HI!"</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%c</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%c</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%c</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that we are printing each character at the location of <code class="language-plaintext highlighter-rouge">s</code>.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Further, you can modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="s">"HI!"</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%c</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">*</span><span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%c</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="mi">1</span><span class="p">));</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%c</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="mi">2</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that the first character at the location of <code class="language-plaintext highlighter-rouge">s</code> is printed. Then, the character at the location <code class="language-plaintext highlighter-rouge">s + 1</code> is printed, and so on.</p>
  </li>
</ul>

<a data-id="" id="string-comparison" style="top: -58.2333px;"></a><h2><a data-id="" href="#string-comparison">String Comparison</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>A string of characters is simply an array of characters identified by its first byte.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Earlier in the course, we considered the comparison of integers. We could represent this in code by typing <code class="language-plaintext highlighter-rouge">code compare.c</code> into the terminal window and writing code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get two integers</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"i: "</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">get_int</span><span class="p">(</span><span class="s">"j: "</span><span class="p">);</span>

    <span class="c1">// Compare integers</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Same</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Different</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that this code takes two integers from the user and compares them.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>In the case of strings, however, one cannot compare two strings using the <code class="language-plaintext highlighter-rouge">==</code> operator.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Utilizing the <code class="language-plaintext highlighter-rouge">==</code>
 operator in an attempt to compare strings will attempt to compare the 
memory locations of the strings instead of the characters therein. 
Accordingly, we recommended the use of <code class="language-plaintext highlighter-rouge">strcmp</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>To illustrate this, modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get two strings</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"t: "</span><span class="p">);</span>

    <span class="c1">// Compare strings' addresses</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="n">t</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Same</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Different</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Noticing that typing in <code class="language-plaintext highlighter-rouge">HI!</code> for both strings still results in the output of <code class="language-plaintext highlighter-rouge">Different</code>.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Why are these strings seemingly different? You can use the following to visualize why:</p>

    <p><img src="Lecture%204%20-%20CS50x%202024_arquivos/cs50Week4Slide115.png" alt="two strings stored separately in memory" title="two strings"></p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Therefore, the code for <code class="language-plaintext highlighter-rouge">compare.c</code> above is actually attempting to see if the memory addresses are different: not the strings themselves.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Using <code class="language-plaintext highlighter-rouge">strcmp</code>, we can correct our code:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get two strings</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"t: "</span><span class="p">);</span>

    <span class="c1">// Compare strings</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">strcmp</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Same</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Different</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that <code class="language-plaintext highlighter-rouge">strcmp</code> can return <code class="language-plaintext highlighter-rouge">0</code> if the strings are the same.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>To further illustrate how these two strings are living in two locations, modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get two strings</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"t: "</span><span class="p">);</span>

    <span class="c1">// Print strings</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice how we now have two separate strings stored likely at two separate locations.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>You can see the locations of these two stored strings with a small modification:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get two strings</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"t: "</span><span class="p">);</span>

    <span class="c1">// Print strings' addresses</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%p</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that the <code class="language-plaintext highlighter-rouge">%s</code> has been changed to <code class="language-plaintext highlighter-rouge">%p</code> in the print statement.</p>
  </li>
</ul>

<a data-id="" id="copying" style="top: -58.2333px;"></a><h2><a data-id="" href="#copying">Copying</a></h2>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>A common need in programming is to copy one string to another.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>In your terminal window, type <code class="language-plaintext highlighter-rouge">code copy.c</code> and write code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;ctype.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get a string</span>
    <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>

    <span class="c1">// Copy string's address</span>
    <span class="n">string</span> <span class="n">t</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>

    <span class="c1">// Capitalize first letter in string</span>
    <span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">toupper</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

    <span class="c1">// Print string twice</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"t: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that <code class="language-plaintext highlighter-rouge">string t = s</code> copies the address of <code class="language-plaintext highlighter-rouge">s</code> to <code class="language-plaintext highlighter-rouge">t</code>. This does not accomplish what we are desiring. The string is not copied – only the address is.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>You can visualize the above code as follows:</p>

    <p><img src="Lecture%204%20-%20CS50x%202024_arquivos/cs50Week4Slide124.png" alt="two pointers pointing at the same memory location with a string" title="two strings"></p>

    <p>Notice that <code class="language-plaintext highlighter-rouge">s</code> and <code class="language-plaintext highlighter-rouge">t</code>
 are still pointing at the same blocks of memory. This is not an 
authentic copy of a string. Instead, these are two pointers pointing at 
the same string.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Before we address this challenge, it’s important to ensure that we don’t experience a <em>segmentation fault</em> through our code, where we attempt to copy <code class="language-plaintext highlighter-rouge">string s</code> to <code class="language-plaintext highlighter-rouge">string t</code>, where <code class="language-plaintext highlighter-rouge">string t</code> does not exist. We can employ the <code class="language-plaintext highlighter-rouge">strlen</code> function as follows to assist with that:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;ctype.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get a string</span>
    <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>

    <span class="c1">// Copy string's address</span>
    <span class="n">string</span> <span class="n">t</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>

    <span class="c1">// Capitalize first letter in string</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">toupper</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="c1">// Print string twice</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"t: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that <code class="language-plaintext highlighter-rouge">strlen</code> is used to make sure <code class="language-plaintext highlighter-rouge">string t</code> exists. If it does not, nothing will be copied.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>To be able to make an authentic copy of the string, we will need to introduce two new building blocks. First, <code class="language-plaintext highlighter-rouge">malloc</code> allows you, the programmer, to allocate a block of a specific size of memory. Second, <code class="language-plaintext highlighter-rouge">free</code> allows you to tell the compiler to <em>free up</em> that block of memory you previously allocated.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>We can modify our code to create an authentic copy of our string as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;ctype.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get a string</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>

    <span class="c1">// Allocate memory for another string</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>

    <span class="c1">// Copy string into memory, including '\0'</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="c1">// Capitalize copy</span>
    <span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">toupper</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

    <span class="c1">// Print strings</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"t: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that <code class="language-plaintext highlighter-rouge">malloc(strlen(s) + 1)</code> creates a block of memory that is the length of the string <code class="language-plaintext highlighter-rouge">s</code> plus one. This allows for the inclusion of the <em>null</em> <code class="language-plaintext highlighter-rouge">\0</code> character in our final, copied string. Then, the <code class="language-plaintext highlighter-rouge">for</code> loop walks through the string <code class="language-plaintext highlighter-rouge">s</code> and assigns each value to that same location on the string <code class="language-plaintext highlighter-rouge">t</code>.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>It turns out that there is an inefficiency in our code. Modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;ctype.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get a string</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>

    <span class="c1">// Allocate memory for another string</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>

    <span class="c1">// Copy string into memory, including '\0'</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="p">);</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">t</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="c1">// Capitalize copy</span>
    <span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">toupper</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

    <span class="c1">// Print strings</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"t: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that <code class="language-plaintext highlighter-rouge">n = strlen(s)</code> is defined now in the left-hand side of the <code class="language-plaintext highlighter-rouge">for loop</code>. It’s best not to call unneeded functions in the middle condition of the <code class="language-plaintext highlighter-rouge">for</code> loop, as it will run over and over again. When moving <code class="language-plaintext highlighter-rouge">n = strlen(s)</code> to the left-hand side, the function <code class="language-plaintext highlighter-rouge">strlen</code> only runs once.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>The <code class="language-plaintext highlighter-rouge">C</code> Language has a built-in function to copy strings called <code class="language-plaintext highlighter-rouge">strcpy</code>. It can be implemented as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;ctype.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get a string</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>

    <span class="c1">// Allocate memory for another string</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>

    <span class="c1">// Copy string into memory</span>
    <span class="n">strcpy</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>

    <span class="c1">// Capitalize copy</span>
    <span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">toupper</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

    <span class="c1">// Print strings</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"t: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that <code class="language-plaintext highlighter-rouge">strcpy</code> does the same work that our <code class="language-plaintext highlighter-rouge">for</code> loop previously did.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Both <code class="language-plaintext highlighter-rouge">get_string</code> and <code class="language-plaintext highlighter-rouge">malloc</code> return <code class="language-plaintext highlighter-rouge">NULL</code>, a special value in memory, in the event that something goes wrong. You can write code that can check for this <code class="language-plaintext highlighter-rouge">NULL</code> condition as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;ctype.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Get a string</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Allocate memory for another string</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Copy string into memory</span>
    <span class="n">strcpy</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>

    <span class="c1">// Capitalize copy</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">toupper</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="c1">// Print strings</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"t: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>

    <span class="c1">// Free memory</span>
    <span class="n">free</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that if the string obtained is of length <code class="language-plaintext highlighter-rouge">0</code> or malloc fails, <code class="language-plaintext highlighter-rouge">NULL</code> is returned. Further, notice that <code class="language-plaintext highlighter-rouge">free</code> lets the computer know you are done with this block of memory you created via <code class="language-plaintext highlighter-rouge">malloc</code>.</p>
  </li>
</ul>

<a data-id="" id="malloc-and-valgrind" style="top: -58.2333px;"></a><h2><a data-id="" href="#malloc-and-valgrind">malloc and Valgrind</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><em>Valgrind</em> is a tool that can check to see if there are memory-related issues with your programs wherein you utilized <code class="language-plaintext highlighter-rouge">malloc</code>. Specifically, it checks to see if you <code class="language-plaintext highlighter-rouge">free</code> all the memory you allocated.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Consider the following code for <code class="language-plaintext highlighter-rouge">memory.c</code>:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
    <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">72</span><span class="p">;</span>
    <span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">73</span><span class="p">;</span>
    <span class="n">x</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mi">33</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that running this program does not cause any errors. While <code class="language-plaintext highlighter-rouge">malloc</code> is used to allocate enough memory for an array, the code fails to <code class="language-plaintext highlighter-rouge">free</code> that allocated memory.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>If you type <code class="language-plaintext highlighter-rouge">make memory</code> followed by <code class="language-plaintext highlighter-rouge">valgrind ./memory</code>,
 you will get a report from valgrind that will report where memory has 
been lost as a result of your program. One error that valgrind reveals 
is that we attempted to assign the value of <code class="language-plaintext highlighter-rouge">33</code> at the 4th position of the array, where we only allocated an array of size <code class="language-plaintext highlighter-rouge">3</code>. Another error is that we never freed <code class="language-plaintext highlighter-rouge">x</code>.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>You can modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">x</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
    <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">72</span><span class="p">;</span>
    <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">73</span><span class="p">;</span>
    <span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">33</span><span class="p">;</span>
    <span class="n">free</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that running valgrind again now results in no memory leaks.</p>
  </li>
</ul>

<a data-id="" id="garbage-values" style="top: -58.2333px;"></a><h2><a data-id="" href="#garbage-values">Garbage Values</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>When you ask the compiler for a block of memory, there is no guarantee that this memory will be empty.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>It’s very possible that this memory that you allocated was previously utilized by the computer. Accordingly, you may see <em>junk</em> or <em>garbage values</em>. This is a result of you getting a block of memory but not initializing it. For example, consider the following code for <code class="language-plaintext highlighter-rouge">garbage.c</code>:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">scores</span><span class="p">[</span><span class="mi">1024</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">1024</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"%i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">scores</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that running this code will allocate <code class="language-plaintext highlighter-rouge">1024</code> locations in memory for your array, but the <code class="language-plaintext highlighter-rouge">for</code> loop will likely show that not all values therein are <code class="language-plaintext highlighter-rouge">0</code>.
 It’s always best practice to be aware of the potential for garbage 
values when you do not initialize blocks of memory to some other value 
like zero or otherwise.</p>
  </li>
</ul>

<a data-id="" id="pointer-fun-with-binky" style="top: -58.2333px;"></a><h2><a data-id="" href="#pointer-fun-with-binky">Pointer Fun with Binky</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>We watched a <a href="https://www.youtube.com/watch?v=5VnDaHBi8dM">video from Stanford University</a> that helped us visualize and understand pointers.</li>
</ul>

<a data-id="" id="swap" style="top: -58.2333px;"></a><h2><a data-id="" href="#swap">Swap</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>In the real world, a common need in programming is to swap two 
values. Naturally, it’s hard to swap two variables without a temporary 
holding space. In practice, you can type <code class="language-plaintext highlighter-rouge">code swap.c</code> and write code as follows to see this in action:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"x is %i, y is %i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
    <span class="n">swap</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"x is %i, y is %i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that while this code runs, it does not work. The values, even after being sent to the <code class="language-plaintext highlighter-rouge">swap</code> function, do not swap. Why?</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>When you pass values to a function, you are only providing copies. In previous weeks, we discussed the concept of <em>scope</em>. The values of <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> created in the curly <code class="language-plaintext highlighter-rouge">{}</code> braces of the <code class="language-plaintext highlighter-rouge">main</code> function only have the scope of the <code class="language-plaintext highlighter-rouge">main</code> function. Consider the following image:</p>

    <p><img src="Lecture%204%20-%20CS50x%202024_arquivos/cs50Week4Slide163.png" alt="a rectangle with machine code at top followed by globals heap and stack" title="stack and heap"></p>

    <p>Notice that <em>global</em> variables, which we have not used in this course, live in one place in memory. Various functions are stored in the <code class="language-plaintext highlighter-rouge">stack</code> in another area of memory.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Now, consider the following image:</p>

    <p><img src="Lecture%204%20-%20CS50x%202024_arquivos/cs50Week4Slide167.png" alt="a rectangle with main function at bottom and swap function directly above it" title="frames"></p>

    <p>Notice that <code class="language-plaintext highlighter-rouge">main</code> and <code class="language-plaintext highlighter-rouge">swap</code> have two separate <em>frames</em> or areas of memory. Therefore, we cannot simply pass the values from one function to another to change them.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Modify your code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">b</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"x is %i, y is %i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
    <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"x is %i, y is %i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span>
    <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
    <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that variables are not passed by <em>value</em> but by <em>reference</em>. That is, the addresses of <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code> are provided to the function. Therefore, the <code class="language-plaintext highlighter-rouge">swap</code> function can know where to make changes to the actual <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code> from the main function.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>You can visualize this as follows:</p>

    <p><img src="Lecture%204%20-%20CS50x%202024_arquivos/cs50Week4Slide198.png" alt="a and b stored in main function being passed by reference to the swap function" title="swap by reference"></p>
  </li>
</ul>

<a data-id="" id="overflow" style="top: -58.2333px;"></a><h2><a data-id="" href="#overflow">Overflow</a></h2>
<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>A <em>heap overflow</em> is when you overflow the heap, touching areas of memory you are not supposed to.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>A <em>stack overflow</em> is when too many functions are called, overflowing the amount of memory available.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Both of these are considered <em>buffer overflows</em>.</li>
</ul>

<a data-id="" id="scanf" style="top: -58.2333px;"></a><h2><a data-id="" href="#scanf"><code class="language-plaintext highlighter-rouge">scanf</code></a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>In CS50, we have created functions like <code class="language-plaintext highlighter-rouge">get_int</code> to simplify the act of getting input from the user.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">scanf</code> is a built-in function that can get user input.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>We can reimplement <code class="language-plaintext highlighter-rouge">get_int</code> rather easily using <code class="language-plaintext highlighter-rouge">scanf</code> as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"x: "</span><span class="p">);</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%i"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">x</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"x: %i</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that the value of <code class="language-plaintext highlighter-rouge">x</code> is stored at the location of <code class="language-plaintext highlighter-rouge">x</code> in the line <code class="language-plaintext highlighter-rouge">scanf("%i", &amp;x)</code>.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>However, attempting to reimplement <code class="language-plaintext highlighter-rouge">get_string</code> is not easy. Consider the following:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">;</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that no <code class="language-plaintext highlighter-rouge">&amp;</code>
 is required because strings are special. Still, this program will not 
function. Nowhere in this program do we allocate the amount of memory 
required for our string. Indeed, we don’t know how long of a string may 
be inputted by the user!</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Further, your code could be modified as follows. However, we have to pre-allocate a certain amount of memory for a string:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">free</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that if a string that is six bytes is provided you <em>might</em> get an error.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>Simplifying our code as follows we can further understand this essential problem of pre-allocation:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">s</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: "</span><span class="p">);</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%s"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"s: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that if we pre-allocate an array of size <code class="language-plaintext highlighter-rouge">4</code>, we can type <code class="language-plaintext highlighter-rouge">cat</code> and the program functions. However, a string larger than this <em>could</em> create an error.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Sometimes,
 the compiler or the system running it may allocate more memory than we 
indicate. Fundamentally, though, the above code is unsafe. We cannot 
trust that the user will input a string that fits into our pre-allocated
 memory.</li>
</ul>

<a data-id="" id="file-io" style="top: -58.2333px;"></a><h2><a data-id="" href="#file-io">File I/O</a></h2>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>You can read from and manipulate files. While this topic will be 
discussed further in a future week, consider the following code for <code class="language-plaintext highlighter-rouge">phonebook.c</code>:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Open CSV file</span>
    <span class="kt">FILE</span> <span class="o">*</span><span class="n">file</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">"phonebook.csv"</span><span class="p">,</span> <span class="s">"a"</span><span class="p">);</span>

    <span class="c1">// Get name and number</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"Name: "</span><span class="p">);</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">number</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"Number: "</span><span class="p">);</span>

    <span class="c1">// Print to file</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s">"%s,%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">number</span><span class="p">);</span>

    <span class="c1">// Close file</span>
    <span class="n">fclose</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that this code uses pointers to access the file.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>You can create a file called <code class="language-plaintext highlighter-rouge">phonebook.csv</code>
 in advance of running the above code. After running the above program 
and inputting a name and phone number, you will notice that this data 
persists in your CSV file.</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>If we want to ensure that <code class="language-plaintext highlighter-rouge">phonebook.csv</code> exists prior to running the program, we can modify our code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cs50.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// Open CSV file</span>
    <span class="kt">FILE</span> <span class="o">*</span><span class="n">file</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">"phonebook.csv"</span><span class="p">,</span> <span class="s">"a"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">file</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Get name and number</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"Name: "</span><span class="p">);</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">number</span> <span class="o">=</span> <span class="n">get_string</span><span class="p">(</span><span class="s">"Number: "</span><span class="p">);</span>

    <span class="c1">// Print to file</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s">"%s,%s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">number</span><span class="p">);</span>

    <span class="c1">// Close file</span>
    <span class="n">fclose</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that this program protects against a <code class="language-plaintext highlighter-rouge">NULL</code> pointer by invoking <code class="language-plaintext highlighter-rouge">return 1</code>.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>
    <p>We can implement our own copy program by typing <code class="language-plaintext highlighter-rouge">code cp.c</code> and writing code as follows:</p>

    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdint.h&gt;</span><span class="cp">
</span>
<span class="k">typedef</span> <span class="kt">uint8_t</span> <span class="n">BYTE</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="kt">FILE</span> <span class="o">*</span><span class="n">src</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">"rb"</span><span class="p">);</span>
    <span class="kt">FILE</span> <span class="o">*</span><span class="n">dst</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="s">"wb"</span><span class="p">);</span>

    <span class="n">BYTE</span> <span class="n">b</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">fread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">b</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">src</span><span class="p">)</span> <span class="o">!=</span><span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">fwrite</span><span class="p">(</span><span class="o">&amp;</span><span class="n">b</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">dst</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">fclose</span><span class="p">(</span><span class="n">dst</span><span class="p">);</span>
    <span class="n">fclose</span><span class="p">(</span><span class="n">src</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>    </div>
    <p>Notice that this file creates our own data type called a <code class="language-plaintext highlighter-rouge">BYTE</code> that is the size of a <code class="language-plaintext highlighter-rouge">uint8_t</code>. Then, the file reads a <code class="language-plaintext highlighter-rouge">BYTE</code> and writes it to a file.</p>
  </li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>BMPs
 are also assortments of data that we can examine and manipulate. This 
week, you will be doing just that in your problem sets!</li>
</ul>

<a data-id="" id="summing-up" style="top: -58.2333px;"></a><h2><a data-id="" href="#summing-up">Summing Up</a></h2>
<p>In this lesson, you learned about pointers that provide you with the 
ability to access and manipulate data at specific memory locations. 
Specifically, we delved into…</p>

<ul class="fa-ul">
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Pixel art</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Hexadecimal</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Memory</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Pointers</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Strings</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Pointer Arithmetic</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>String Comparison</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Copying</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>malloc and Valgrind</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Garbage values</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Swapping</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>Overflow</li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span><code class="language-plaintext highlighter-rouge">scanf</code></li>
  <li data-marker="*"><span class="fa-li"><i class="fas fa-square"></i></span>File I/O</li>
</ul>

<p>See you next time!</p>


                </main>

            </div>

        </div>

        
 
        <script src="Lecture%204%20-%20CS50x%202024_arquivos/page.js"></script>

    


</body><grammarly-desktop-integration data-grammarly-shadow-root="true"></grammarly-desktop-integration></html>